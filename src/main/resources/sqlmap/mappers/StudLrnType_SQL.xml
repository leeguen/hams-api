<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="StudLrnType">
    <select id="getLrnTypeCheck" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeCheck */
    	select * from lrnapi.fn_ds_ap_lrn_type_check(#{studId}, #{yymm}, 'st');
    </select>
    
    <select id="getLrnTypeDetail" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeDetail */
		select
			*
		from lrndmt.mt_dm_stud a
		left outer join lrnapi.fn_ds_ap_lrn_type_detail(#{studId}, #{yymm}, 'st') b on a.stud_key = b.stud_id
		left outer join lrnapi.fn_ds_ap_lrn_type_detail_msg(#{studId}, #{yymm}, 'st') c on a.stud_key = c.stud_id
		where a.stud_key = #{studId}
    </select>
    
    <select id="getLrnTypeDetailMsg" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeDetailMsg */
		select
			*
		from lrndmt.mt_dm_stud a
		left outer join lrnapi.fn_ds_ap_lrn_type_detail(#{studId}, #{yymm}, 'st') b on a.stud_key = b.stud_id
		left outer join lrnapi.fn_ds_ap_lrn_type_detail_msg(#{studId}, #{yymm}, 'st') c on a.stud_key = c.stud_id
		where a.stud_key = #{studId}
    </select>
    
    <select id="getLrnTypeInfoYn" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeInfoYn */
    	SELECT
			IF(LRN_TYPE_CNT = 1, 'Y', 'N') AS LRN_TYPE_ANAL_YN,
		    IF(LRN_TYPE_CHECK_CNT = 1, 'Y', 'N') AS LRN_TYPE_CHECK_YN
		FROM (
			SELECT
				STUD_ID,
				COUNT(LRN_TYPE_CD) AS LRN_TYPE_CNT,
				(SELECT LRN_TYPE_GUIDE FROM LRN_TYPE_GUIDE WHERE STUD_ID = #{studId}) AS LRN_TYPE_CHECK_CNT
			FROM MONTH_LRN_TYPE
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm}
		) LTCNT;
    </select>
    
    <select id="getLrnTypeHistory" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeHistory */
    	select * from lrnapi.fn_ds_ap_lrn_type_history(#{studId}, #{yymm}, 'st');
    </select>
    
    <select id="getLrnTypePath" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypePath */
    	select * from lrnapi.fn_ds_ap_lrn_type_by_one(#{studId}, #{yymm}, 'st', #{lrnTypeCd});
    </select>
    
    <select id="getLrnTypeInfoForAdmin" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeInfoForAdmin */
		SELECT
			ST.STUD_ID,
			ST.LRN_TYPE_CD,
			LI.LRN_TYPE_NM,
		    LI.LRN_TYPE_DEF,
		    ROUND(LS.ACT_SCORE * 10, 1) AS ACT_SCORE,
			ROUND(LS.STR_SCORE * 10, 1) AS STR_SCORE,
		    LT2.MSG,
		    LT2.STR_MSG,
		    LT2.ACT_MSG,
		    LT.ACT_PATH,
		    LT.STR_PATH
		FROM MONTH_LRN_TYPE ST
		LEFT OUTER JOIN LRN_TYPE_STT LS ON ST.STUD_ID = LS.STUD_ID AND ST.YYMM = LS.YYMM
		LEFT OUTER JOIN LRN_TYPE_INFO LI ON ST.LRN_TYPE_CD = LI.LRN_TYPE_CD
		LEFT OUTER JOIN LRN_TYPE_TEST_MSG LT ON ST.LRN_TYPE_CD = LT.LRN_TYPE_CD
		LEFT OUTER JOIN LRN_TYPE_TEST_MSG2 LT2 ON ST.LRN_TYPE_CD = LT2.LRN_TYPE_CD
		WHERE ST.STUD_ID = #{studId} AND ST.YYMM = #{yymm};
    </select>
    
    <select id="getLrnTypeHistoryForAdmin" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getLrnTypeHistoryForAdmin */
    	SELECT
			CONCAT((SELECT MIN(MO) FROM S_COMM_WK_DT WHERE YYMM = ST.YYMM AND DATE_FORMAT(MO,'%Y%m%d') LIKE CONCAT(ST.YYMM, '%'))
    		,'(월요일)')AS DT,
			CONCAT('유형',LI.LRN_TYPE_LEVEL) AS LRN_TYPE_LEVEL,
			LI.LRN_TYPE_LEVEL AS LRN_TYPE_CD,
		    LI.LRN_TYPE_IMG,
		    LI.LRN_TYPE_NM,
		    LI.LRN_TYPE_DEF,
		    CAST(ROUND(LS.ACT_SCORE * 10, 0) AS UNSIGNED) AS ACT_SCORE,
			CAST(ROUND(LS.STR_SCORE * 10, 0) AS UNSIGNED) AS STR_SCORE,
		    LI.LRN_TYPE_SPEC,
		    LT2.MSG,
		    LT2.STR_MSG,
		    LT2.ACT_MSG,
		    LT.ACT_PATH,
		    LT.STR_PATH
		FROM (
			SELECT
				STUD_ID,
				YYMM
			FROM STUD
			CROSS JOIN (
				SELECT
					YYMM
				FROM S_COMM_WK_DT
				WHERE YYMM<![CDATA[<=]]>#{yymm}
					AND WK = 1
				ORDER BY YYMM DESC
				LIMIT 12
			) YM
			WHERE STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN MONTH_LRN_TYPE MD ON ST.STUD_ID = MD.STUD_ID AND ST.YYMM = MD.YYMM
		LEFT OUTER JOIN LRN_TYPE_STT LS ON ST.YYMM = LS.YYMM AND ST.STUD_ID = LS.STUD_ID
		LEFT OUTER JOIN LRN_TYPE_INFO LI ON IFNULL(MD.LRN_TYPE_CD,'LT099') = LI.LRN_TYPE_CD
		LEFT OUTER JOIN LRN_TYPE_TEST_MSG LT ON MD.LRN_TYPE_CD = LT.LRN_TYPE_CD
		LEFT OUTER JOIN LRN_TYPE_TEST_MSG2 LT2 ON MD.LRN_TYPE_CD = LT2.LRN_TYPE_CD
		ORDER BY ST.YYMM;
    </select>
    
    <update id="updateLrnTypeInfo" parameterType="hashMap">
    	/* StudLrnType.updateLrnTypeInfo */
    	UPDATE LRN_TYPE_GUIDE 
		SET 
			LRN_TYPE_GUIDE = #{guideValue},
		    UPD_DTTM = DATE_ADD(NOW(), INTERVAL 9 HOUR)
		WHERE STUD_ID = #{studId};
    </update>
    
    <select id="getReportCheck" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getReportCheck */
    	SELECT
			IF(COUNT(*) = 0, 'N', 'Y') AS DATA_CHECK
    	<choose>
    		<when test="wk == null">
		FROM MONTH_REPORT
		WHERE YYMM = #{yymm}
    		</when>
    		<otherwise>
   		FROM WEEK_REPORT
		WHERE YYMM = #{yymm}
			AND WK = #{wk}
    		</otherwise>
    	</choose>
    		AND STUD_ID = #{studId};	
    </select>
    
    <insert id="insertReportCheck" parameterType="hashMap">
    	/* StudLrnType.insertReportCheck */
    	<choose>
	    	<when test='wk == null'>
	   		INSERT INTO MONTH_REPORT
			(
				YYMM,
				STUD_ID,
			    CHECKYN,
			    REG_DTTM,
			    UPD_DTTM
			)
			VALUES
			(
				#{yymm},
				#{studId},
				"Y",
				DATE_ADD(NOW(), INTERVAL 9 HOUR),
				DATE_ADD(NOW(), INTERVAL 9 HOUR)
			);
	    	</when>
	    	<otherwise>
    		INSERT INTO WEEK_REPORT
			(
				YYMM,
				WK,
				STUD_ID,
			    CHECKYN,
			    REG_DTTM,
			    UPD_DTTM
			)
			VALUES
			(
				#{yymm},
				#{wk},
				#{studId},
				"Y",
				DATE_ADD(NOW(), INTERVAL 9 HOUR),
				DATE_ADD(NOW(), INTERVAL 9 HOUR)
			);
	    	</otherwise>
    	</choose>
    </insert>
    
    <delete id="deleteReportCheck" parameterType="hashMap">
    	/* StudLrnType.deleteReportCheck */
    	<choose>
	    	<when test='wk == null'>
	   		DELETE FROM MONTH_REPORT WHERE YYMM = #{yymm} AND STUD_ID = #{studId};
	    	</when>
	    	<otherwise>
	    	DELETE FROM WEEK_REPORT WHERE YYMM = #{yymm} AND WK = #{wk} AND STUD_ID = #{studId};
	    	</otherwise>
    	</choose>
    </delete>
    
     <select id="getStudLrnTypeInfoCheck" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getStudLrnTypeInfoCheck */
    	SELECT
			LRN_STT_CD,
    		END_DT
		FROM STUD
		WHERE STUD_ID = #{studId};
    </select>
    
    <select id="getStudLrnTypeInfo" parameterType="hashMap" resultType="resultMap">
    	/* StudLrnType.getStudLrnTypeInfo */
    	SELECT
    		ST.STUD_ID,
			CASE 
				WHEN MS.LRN_TYPE_CD IS NULL AND (
					INSTR(ST.PKG_NM, '임직원')<![CDATA[>]]>0 OR INSTR(ST.PKG_NM, '센터상품')<![CDATA[>]]>0 OR INSTR(ST.PKG_NM, 'CP상품')<![CDATA[>]]>0 OR INSTR(ST.PKG_NM, '호밍')<![CDATA[>]]>0
				) THEN '빛나는 솔로형'
		        ELSE (SELECT LRN_TYPE_DKT_NM FROM LRN_TYPE_INFO WHERE LRN_TYPE_CD = MS.LRN_TYPE_CD)
		    END AS LRN_TYPE_CD,
			MS.LRN_TYPE_GROUP_CD,
		    ST.LRN_STT_CD,
		    CASE
				WHEN INSTR(ST.PKG_NM, '임직원')<![CDATA[>]]>0 THEN '임직원'
		        WHEN INSTR(ST.PKG_NM, 'CP상품')<![CDATA[>]]>0 THEN 'SL'
		        WHEN INSTR(ST.PKG_NM, '센터상품')<![CDATA[>]]>0 OR INSTR(ST.PKG_NM, '호밍')<![CDATA[>]]>0 THEN '센터상품'
		        WHEN ST.STUD_TYPE = 2 THEN '정회원'
		        ELSE (SELECT CD_NM FROM COMM_CD WHERE CD = ST.STUD_TYPE AND GRP = 'STUD_TYPE')
		    END AS STUD_TYPE,
		    CASE
				WHEN INSTR(ST.PKG_NM, '임직원')<![CDATA[>]]>0 THEN 3
		        WHEN INSTR(ST.PKG_NM, 'CP상품')<![CDATA[>]]>0 THEN 4
		        WHEN INSTR(ST.PKG_NM, '센터상품')<![CDATA[>]]>0 OR INSTR(ST.PKG_NM, '호밍')<![CDATA[>]]>0 THEN 5
		        WHEN ST.STUD_TYPE = 0 THEN 2
		        WHEN ST.STUD_TYPE = 2 THEN 1
		        ELSE ST.STUD_TYPE
		    END AS STUD_TYPE_ID,
			(SELECT CD_NM FROM COMM_CD WHERE CD = ST.STUD_STATUS AND GRP = 'STUD_STATUS') AS STUD_STATUS,
		    ST.STUD_STATUS_DETAIL,
		    ST.PKG_NM
		FROM STUD ST 
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
		        LRN_TYPE_CD,
		        LRN_TYPE_GROUP_CD
			FROM MONTH_LRN_TYPE
			WHERE STUD_ID = #{studId}
		    ORDER BY YYMM DESC
		    LIMIT 1
		) MS ON ST.STUD_ID = MS.STUD_ID
		WHERE ST.STUD_ID = #{studId};
    </select>
    
    <update id="updateStudLrnTypeInfo">
    	/* StudLrnType.updateStudLrnTypeInfo */
		UPDATE STUD 
		SET LRN_STT_CD = #{lrnSttCd},
		 STUD_STATUS = #{studStatus},
		 STUD_STATUS_DETAIL = #{studStatusDetail},
		 UPD_DTTM = DATE_ADD(NOW(), INTERVAL 9 HOUR)
		WHERE STUD_ID = #{studId}
	</update>
    
</mapper>
