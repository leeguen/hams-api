<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Group_1.0">

    <select id="selectPeriodWeeks" parameterType="hashMap" resultType="resultMap">
	/* selectPeriodWeeks : 년월, 주차 산출 - 기간정보 */
		SELECT 
			CAST(SUBSTRING(YYMM,1,4) AS SIGNED INTEGER) AS year,
			CAST(SUBSTRING(YYMM,5,2) AS SIGNED INTEGER) AS month,		
			CAST(WK AS SIGNED INTEGER) AS week,
			CONCAT(	IF(#{svcOpenDe} <![CDATA[>]]> IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						, DATE_FORMAT(STR_TO_DATE(#{svcOpenDe}, '%Y-%m-%d'), '%Y.%m.%d')
						, DATE_FORMAT(IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU)))))), '%Y.%m.%d'))
					,'-'
					,DATE_FORMAT(IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))), '%Y.%m.%d')
			) AS dtStr
		FROM COMM_WK_DT
		WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) <![CDATA[>=]]> DATE_FORMAT(#{svcOpenDe}, '%Y-%m-%d')
			AND IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) <![CDATA[<]]> DATE_FORMAT(now() + INTERVAL 3 HOUR , '%Y-%m-%d')
	</select>
	
	<select id="selectPeriodMonths" parameterType="hashMap" resultType="resultMap">
	/* selectPeriodMonths : 년월 산출 - 기간정보 */
		SELECT 
			CAST(SUBSTRING(A.YYMM,1,4) AS SIGNED INTEGER) AS year,
			CAST(SUBSTRING(A.YYMM,5,2) AS SIGNED INTEGER) AS month,
			CONCAT( IF( STR_TO_DATE(#{svcOpenDe}, '%Y-%m-%d') > STR_TO_DATE(CONCAT(SUBSTRING(A.YYMM,1,4),SUBSTRING(A.YYMM,5,2),'01'),'%Y%m%d')
						, DATE_FORMAT(#{svcOpenDe}, '%Y.%m.%d')
						, DATE_FORMAT(CONCAT(SUBSTRING(A.YYMM,1,4),'-',SUBSTRING(A.YYMM,5,2),'-01'),'%Y.%m.%d') )
					,'-',
					DATE_FORMAT(LAST_DAY(IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))), '%Y.%m.%d')) AS dtStr
		FROM COMM_WK_DT A 
		JOIN (
			SELECT
				SUBSTRING_INDEX(GROUP_CONCAT(YYMM SEPARATOR '|'),'|', 1) AS START_YYMM,
		        SUBSTRING_INDEX(GROUP_CONCAT(YYMM SEPARATOR '|'),'|', -1) AS END_YYMM
			FROM COMM_WK_DT
			WHERE ( 
					DATE_FORMAT(#{svcOpenDe}, '%Y-%m-%d')
					BETWEEN IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						and IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) 
				  )
				  OR (
					DATE_FORMAT(NOW() + INTERVAL 3 HOUR , '%Y-%m-%d')
					BETWEEN IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						and IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO))))))
				  )
		) B ON A.YYMM <![CDATA[>=]]> B.START_YYMM 
			AND A.YYMM <![CDATA[<]]> B.END_YYMM
		GROUP BY YYMM
	</select>
    
    <select id="selectStud" parameterType="hashMap" resultType="resultMap">
    /* selectStud : 학습분석 메인 - 학생 정보 */
	    SELECT studNm, gender, studId, loginId, grade, schlNm,
			IFNULL(TIMESTAMPDIFF(DAY, lastLoginDt,now()),-1) AS daysAgo,
			DATE_FORMAT(lastLoginDt,'%Y.%m.%d') AS lastLoginDt,
			DATE_FORMAT(lrnStartDt,'%Y.%m.%d') AS lrnStartDt
			FROM (
					SELECT 
						A.STUD_NM AS studNm,
						A.GENDER,
						A.STUD_ID AS studId,
						A.LOGIN_ID AS loginId,
						A.GRADE,
						A.SCHL_NM AS schlNm,
						MAX(B.DT) AS lastLoginDt, 
						A.START_DT AS lrnStartDt
					FROM STUD A LEFT JOIN DAY_ATT_LOG B ON A.STUD_ID = B.STUD_ID AND B.LOGIN_YN = 'Y'  AND B.DT  <![CDATA[>=]]>  (NOW() - INTERVAL 7 DAY)
					WHERE A.STUD_ID = #{studId}
			) S	    
    </select>
    
    <select id="selectLrnBasicPeriod" parameterType="hashMap" resultType="resultMap">
	/* selectLrnBasicPeriod : 기관용 기간별 학습 분석 */
		SELECT
		<choose>
            <when test='currConCheck == "w"'>    
			WK.dt 
			</when>
			<otherwise>
			CONCAT(#{startDt}, ' ~ ', #{endDt}) As dt
			</otherwise>
        </choose>
			, CONCAT(DATE_FORMAT(STR_TO_DATE(#{startDt}, '%Y-%m-%d'), '%Y.%m.%d'), '-', DATE_FORMAT(STR_TO_DATE(#{endDt}, '%Y-%m-%d'), '%Y.%m.%d')) AS dtStr
			, ROUND( ATT.ATT_CNT / ATT.PLAN_CNT * 100 ) AS attRt  	-- 출석률 : (계획된 학습일 중 출석일 수 / 계획된 학습일 수) * 100
			, LRN.EX_RT AS exRt-- 수행률
			, ER.AVG_CRT_RT AS crtRt	-- 정답률
			, IF(LRN.EX_RT > 90, 'A', IF(LRN.EX_RT > 20, 'B', 'C')) AS lrnSignal	-- 학습분석신호
			, ROUND( LRN2.LRN_SEC / ATT.ATT_CNT ) AS dayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		FROM 
		<choose>
            <when test='currConCheck == "w"'>            
		(	-- 주차
			SELECT 
				GROUP_CONCAT(CONCAT(SUBSTRING(YYMM,5,2),'월',WK,'주차') SEPARATOR ' ~ ') AS dt
			FROM COMM_WK_DT 
			WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO))))))  <![CDATA[>=]]> DATE_FORMAT(#{startDt}, '%Y-%m-%d')
				AND IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU)))))) <![CDATA[<]]> DATE_FORMAT(#{endDt} + INTERVAL 3 HOUR , '%Y-%m-%d')				
		) AS WK
		,
			</when>
        </choose>
		(	-- 계획된 학습일 수 , 계획된 학습일 중 출석일 수
			SELECT 
				COUNT(*) AS PLAN_CNT,
				SUM(LOGIN) AS ATT_CNT
			FROM
			(
				SELECT 
					DISTINCT ATT.DT AS ATT_DT,
					IF(LOGIN_YN = 'Y', 1, 0) AS LOGIN
				FROM DAY_ATT_LOG AS ATT
				WHERE ATT.STUD_ID = #{studId} AND ATT.DT BETWEEN #{startDt} AND #{endDt} 
					AND PLAN_YN = 'Y'
			) AS ATT			
		) AS ATT
		, (	-- 수행률 : (완료한 학습 수 / 계획된 학습 수) * 100  
			SELECT ROUND(AVG(PLAN_LRN_EX_CNT/PLAN_CNT * 100)) AS EX_RT
			FROM DAY_7_LRN_EX_STT PL 
	        WHERE STUD_ID = #{studId} AND DT = #{endDt}   
        ) AS LRN 
        , (	-- 정답률	: (맞은 문항 수 / 전체 문항 수) * 100			
        	SELECT ROUND(AVG(CRT_CNT / QUES_CNT * 100)) AS AVG_CRT_RT
            FROM DAY_7_EXAM_STT 
            WHERE STUD_ID = #{studId} AND DT = #{endDt}    
        ) AS ER 
        , (	-- 선택된 기간 내에 총 학습시간
    		SELECT SUM(LRN_SEC) AS LRN_SEC
    		FROM
    			DAY_LRN_EX_LOG 
    		WHERE 
            	STUD_ID = #{studId}
            	AND DT BETWEEN #{startDt} AND #{endDt}  
        ) AS LRN2 
	</select>
	
	<select id="selectLrnBasicMonthly" parameterType="hashMap" resultType="resultMap">
	/* selectLrnBasicMonthly : 기관용 월간 학습 분석 */
		SELECT
			CONCAT(SUBSTRING(#{yyyy},3,2),'년',#{mm},'월') AS dt
			, CONCAT(DATE_FORMAT(STR_TO_DATE(#{startDt}, '%Y-%m-%d'), '%Y.%m.%d'), '-', DATE_FORMAT(STR_TO_DATE(#{endDt}, '%Y-%m-%d'), '%Y.%m.%d')) AS dtStr
			, ROUND( ATT.ATT_CNT / ATT.PLAN_CNT * 100 ) AS attRt  	-- 출석률 : (계획된 학습일 중 출석일 수 / 계획된 학습일 수) * 100
			, LRN.EX_RT AS exRt	-- 수행률
			, ER.AVG_CRT_RT AS crtRt 	-- 정답률
			, IF(LRN.EX_RT > 90, 'A', IF(LRN.EX_RT > 20, 'B', 'C')) AS lrnSignal	-- 학습분석신호
			, ROUND( LRN.LRN_SEC / ATT.ATT_CNT ) AS dayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		FROM 
		(	-- 계획된 학습일 수 , 계획된 학습일 중 출석일 수
			SELECT 
				COUNT(*) AS PLAN_CNT,
				SUM(LOGIN) AS ATT_CNT
			FROM
			(
				SELECT 
					DISTINCT ATT_DT AS ATT_DT,
					IF(LOGIN_YN = 'Y', 1, 0) AS LOGIN
				FROM MONTH_ATT_LOG
				WHERE YYMM = #{yymm} AND STUD_ID = #{studId}	
					AND PLAN_YN = 'Y'
			) AS ATT	
		) AS ATT
		, (	-- 수행률, 학습시간	
			SELECT ROUND(PLAN_LRN_EX_CNT/PLAN_CNT * 100) AS EX_RT, LRN_SEC
			FROM MONTH_LRN_EX_STT PL 
	       	WHERE YYMM = #{yymm} AND STUD_ID = #{studId}
        ) AS LRN 
        , (	-- 정답률		
        	SELECT ROUND(AVG(CRT_RT)) AS AVG_CRT_RT
            FROM EXAM_RST 
            WHERE 
            	STUD_ID = #{studId}
            	AND DT BETWEEN  #{startDt} AND #{endDt} 
                AND DEL_YN = 'N' 
                AND CRT_RT <![CDATA[>=]]> 0
        ) AS ER 
	</select>
    
    <select id="getOrgEnvConfig" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="setOrgEnvConfig" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLrnHabitChart" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getAiRecommendLrn" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getDiagnsticEvalStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getAttRtStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLrnTmList" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLrnDetail" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getAttCntStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getloginPtnStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getExRtStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getFnshLrnExStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLrnExSttCompareSub" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getALrnExStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getCrtRtStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getIncrtNoteNcStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getCrtQuesCntStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getSlvHabitStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getDayAvgLrnStt " parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getTotalLrnTmStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLongLrnTmStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getSubjExam" parameterType="hashMap" resultType="resultMap">
    	SELECT
		    SUBJ_CD,
		    ANS_QUES_CNT,
		    CRT_QUES_CNT,
		    INCRT_NOTE_CNT,
		    INCRT_NOTE_FNSH_CNT
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(QUES_CNT) AS ANS_QUES_CNT,
				SUM(CRT_CNT) AS CRT_QUES_CNT,
				SUM(INCRT_NT_REG_CNT) AS INCRT_NOTE_CNT,
				SUM(INCRT_NT_FNSH_CNT) AS INCRT_NOTE_FNSH_CNT
			FROM EXAM_RST
			WHERE DT
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
				</when>
				<otherwise>
					BETWEEN #{startDt} AND #{endDt}
				</otherwise>
			</choose> 
				AND STUD_ID = #{studId}
		) CRT ON ST.STUD_ID = CRT.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS CRT_RT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
				</when>
				<otherwise>
					BETWEEN #{startDt} AND #{endDt}
				</otherwise>
			</choose> 
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
			ORDER BY CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END DESC
			LIMIT 1		
		) SUBJ ON ST.STUD_ID = SUBJ.STUD_ID
		WHERE ST.STUD_ID = #{studId};
    </select>
    
    <select id="getCompareSub" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    MAX_SUBJ_CD,
		    MAX_CRT_RT,
		    PRE_MAX_CRT_RT,
		    MAX_SUB_CRT_RT,
		    MIN_SUBJ_CD,
		    MIN_CRT_RT,
		    PRE_MIN_CRT_RT,
		    MIN_SUB_CRT_RT,
		    <choose>
		    	<when test='currConCheck == "m"'>
		    		CONCAT(CAST(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%m') AS UNSIGNED), '월') AS DT,
		    	</when>
		    	<when test='currConCheck == "w"'>
		    		(SELECT CONCAT(CAST(SUBSTRING(YYMM, 5) AS UNSIGNED), '월 ', WK, '주차') FROM COMM_WK_DT WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) = #{endDt}) AS DT,
		    	</when>
		    	<otherwise>
		    		CONCAT(#{startDt}, ' ~ ', #{endDt}) AS DT,
		    	</otherwise>
		    </choose>
		    <choose>
		    	<when test='currConCheck == "m"'>
		    		CONCAT(CAST(DATE_FORMAT(DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH), '%m') AS UNSIGNED), '월') AS PRE_DT
		    	</when>
		    	<when test='currConCheck == "w"'>
		    		(SELECT CONCAT(CAST(SUBSTRING(YYMM, 5) AS UNSIGNED), '월 ', WK, '주차') FROM COMM_WK_DT WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) = DATE_SUB(#{endDt}, INTERVAL 7 DAY)) AS PRE_DT
		    	</when>
		    	<otherwise>
		    		CONCAT(DATE_SUB(#{startDt}, INTERVAL 7 DAY), ' ~ ', DATE_SUB(#{endDt}, INTERVAL 7 DAY)) AS PRE_DT
		    	</otherwise>
		    </choose>
		FROM STUD ST 
		LEFT OUTER JOIN (
			SELECT
				SCRT.STUD_ID,
				SCRT.SUBJ_CD AS MAX_SUBJ_CD,
				SCRT.QUES_CNT,
				SCRT.CRT_RT AS MAX_CRT_RT,
				PSCRT.CRT_RT AS PRE_MAX_CRT_RT,
				(SCRT.CRT_RT - PSCRT.CRT_RT) AS MAX_SUB_CRT_RT
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(QUES_CNT) AS QUES_CNT,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
					</when>
					<otherwise>
						BETWEEN #{startDt} AND #{endDt}
					</otherwise>
				</choose> 
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) SCRT 
			LEFT OUTER JOIN (
				SELECT
					DATE_SUB('2021-10-11', INTERVAL 7 DAY),
					STUD_ID,
					SUBJ_CD,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH))
					</when>
					<otherwise>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>  
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) PSCRT ON SCRT.STUD_ID = PSCRT.STUD_ID AND SCRT.SUBJ_CD = PSCRT.SUBJ_CD
			WHERE SCRT.CRT_RT <![CDATA[>]]> 60
			ORDER BY SCRT.CRT_RT DESC, SCRT.QUES_CNT DESC, (SCRT.CRT_RT - PSCRT.CRT_RT) DESC, SCRT.SUBJ_CD
			LIMIT 1
		) MAXS ON ST.STUD_ID = MAXS.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				SCRT.STUD_ID,
				SCRT.SUBJ_CD AS MIN_SUBJ_CD,
				SCRT.QUES_CNT,
				SCRT.CRT_RT AS MIN_CRT_RT,
				PSCRT.CRT_RT AS PRE_MIN_CRT_RT,
				(PSCRT.CRT_RT - SCRT.CRT_RT) AS MIN_SUB_CRT_RT
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(QUES_CNT) AS QUES_CNT,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
					</when>
					<otherwise>
						BETWEEN #{startDt} AND #{endDt}
					</otherwise>
				</choose> 
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) SCRT 
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH))
					</when>
					<otherwise>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>  
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) PSCRT ON SCRT.STUD_ID = PSCRT.STUD_ID AND SCRT.SUBJ_CD = PSCRT.SUBJ_CD
			WHERE SCRT.CRT_RT <![CDATA[<=]]> 60
			ORDER BY SCRT.CRT_RT, SCRT.QUES_CNT DESC, (PSCRT.CRT_RT - SCRT.CRT_RT) DESC, SCRT.SUBJ_CD
			LIMIT 1
		) MINS ON ST.STUD_ID = MINS.STUD_ID
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getExamChart" parameterType="hashMap" resultType="resultMap">
		SELECT
		    ST.SUBJ_CD,
		    CRT_RT,
		    PREV_CRT_RT,
		    TOP_CRT_RT,
		    AVG_CRT_RT,
		    EXPL_CNT,
		    ANS_QUES_CNT,
		    CRT_QUES_CNT,
		    INCRT_NOTE_NC_CNT,
		    IMPRV_SLV_HABIT_CNT,
		    SKIP_QUES_CNT,
		    CURSORY_QUES_CNT,
		    GUESS_QUES_CNT,
		    MISTAKE_QUES_CNT
		FROM (
			SELECT
				STUD_ID,
		        GRADE,
		        SUBJ_CD
			FROM STUD ST
		    CROSS JOIN COMM_SUBJ_CD CS
			WHERE ST.STUD_ID = #{studId}  
				AND CS.SUBJ_CD LIKE 'C%' 
				AND CS.DEPTH = 1
		) ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
		        COUNT(STUD_ID) AS EXPL_CNT,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS CRT_RT,
				SUM(QUES_CNT) AS ANS_QUES_CNT,
				SUM(CRT_CNT) AS CRT_QUES_CNT,
				IF(IFNULL(SUM(INCRT_NT_REG_CNT),0) = 0, 0, (SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT))) AS INCRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
				</when>
				<otherwise>
					BETWEEN #{startDt} AND #{endDt}
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
		        AND DEL_YN = 'N'
			GROUP BY STUD_ID, SUBJ_CD
		) ER ON ST.STUD_ID = ER.STUD_ID AND ST.SUBJ_CD = ER.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) IN ('GUC', 'GUI', 'SKP', 'CUR', 'MIS'), 1, NULL)) AS IMPRV_SLV_HABIT_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'SKP', 1, NULL)) AS SKIP_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'CUR', 1, NULL)) AS CURSORY_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) IN ('GUC', 'GUI'), 1, NULL)) AS GUESS_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'MIS', 1, NULL)) AS MISTAKE_QUES_CNT
			FROM EXAM_RST_QUES_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
				</when>
				<otherwise>
					BETWEEN #{startDt} AND #{endDt}
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
		) EQ ON ST.STUD_ID = EQ.STUD_ID AND ST.SUBJ_CD = EQ.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS PREV_CRT_RT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'), INTERVAL 1 MONTH))
				</when>
				<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>  
				AND STUD_ID = #{studId}
		        AND DEL_YN = 'N'
			GROUP BY STUD_ID, SUBJ_CD
		) PER ON ST.STUD_ID = PER.STUD_ID AND ST.SUBJ_CD = PER.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				GRADE,
		        SUBJ_CD,
		        NULL AS TOP_CRT_RT,
		        GRP_AVG_CRT_RT AS AVG_CRT_RT
			<choose>
				<when test='currConCheck == "m"'>
					FROM MONTH_GRP_EXAM_SUBJ_RST
					WHERE YYMM = CONCAT(#{yyyy},#{convertMm})
				</when>
				<otherwise>
					FROM DAY_7_GRP_EXAM_SUBJ_RST
		    		WHERE DT = #{endDt}
				</otherwise>
			</choose>  
		) GP ON ST.GRADE = GP.GRADE AND ST.SUBJ_CD = GP.SUBJ_CD  
    </select>
    
    <select id="getExamCdList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			CD AS VALUE,
			CD_NM AS NAME
		FROM COMM_CD
		WHERE GRP = 'EXAM';
    </select>
    
    <select id="getQuesCdList" parameterType="hashMap" resultType="resultMap">
		SELECT
			CASE CD
				WHEN 'CRT' THEN 'crtQues'
				WHEN 'GUC' THEN 'guessQues'
				WHEN 'SKP' THEN 'skipQues'
				WHEN 'GUI' THEN 'guessIncQues'
				WHEN 'CUR' THEN 'cursoryQues'
				WHEN 'INC' THEN 'incrtQues'
				WHEN 'MIS' THEN 'mistakenQues'
			END AS VALUE,
			CASE CD
				WHEN 'GUC' THEN '찍은것으로 보이는 문제(정답)'
				WHEN 'GUI' THEN '찍은것으로 보이는 문제(오답)'
				ELSE CD_NM
			END AS NAME
		FROM COMM_CD
		WHERE GRP = 'QUES_PTN';
    </select>
    
    <select id="getSubjExamListCnt" parameterType="hashMap" resultType="resultMap">
		SELECT
			COUNT(STUD_ID) AS TOTAL_CNT
		FROM (
			SELECT
				ER.STUD_ID
			FROM EXAM_RST ER
			LEFT OUTER JOIN EXAM_RST_QUES_LOG EQ ON ER.DT = EQ.DT AND ER.STUD_ID = EQ.STUD_ID AND ER.EXAM_CD = EQ.EXAM_CD AND ER.EXAM_TYPE = EQ.EXAM_TYPE AND ER.SMT_ID = EQ.SMT_ID
			WHERE ER.DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
				</when>
				<otherwise>
					BETWEEN #{startDt} AND #{endDt}
				</otherwise>
			</choose>
				AND ER.STUD_ID = #{studId}
			<if test="types != null">
					AND ER.EXAM_TYPE IN
				<foreach collection="types" item="item" index="index" separator="," open="(" close=")">
					#{item}
				</foreach>
					AND ER.DEL_YN = 'N'
			</if>
			<choose>
				<when test="search != null">	
					AND ER.EXAM_NM LIKE CONCAT('%',#{search},'%')
				</when>
			</choose>
			GROUP BY ER.STUD_ID, ER.EXAM_CD, ER.SMT_ID
		) CNT
		GROUP BY STUD_ID    
    </select>
    
    <select id="getSubjExamList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ER.SUBJ_CD,
		    DATE_FORMAT(ER.SMT_DTTM,'%Y-%m-%d %H:%i:%s') AS SMT_DTTM,
		    ER.EXAM_TYPE AS TYPE,
		    ER.EXAM_CD,
		    ER.SMT_ID,
		    ER.STUD_ID,
		    ER.EXAM_NM,
		    CONCAT((SELECT IF(COUNT(*) = 1, 1, COUNT(*) + 1) FROM EXAM_RST WHERE STUD_ID = ER.STUD_ID AND EXAM_CD = ER.EXAM_CD AND SMT_ID = ER.SMT_ID),'차') AS ROUND,
		    ER.CRT_CNT AS CRT_QUES_CNT,
		    ER.QUES_CNT AS QUES_CNT,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'CRT', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS CRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'GUC', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS GUESS_CRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'SKP', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS SKIP_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'GUI', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS GUESS_INC_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'CUR', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS CURSORY_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'INC', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS INCRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'MIS', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS MISTAKEN_QUES
		FROM EXAM_RST ER
		LEFT OUTER JOIN EXAM_RST_QUES_LOG EQ ON ER.DT = EQ.DT AND ER.STUD_ID = EQ.STUD_ID AND ER.EXAM_CD = EQ.EXAM_CD AND ER.EXAM_TYPE = EQ.EXAM_TYPE AND ER.SMT_ID = EQ.SMT_ID
		WHERE ER.DT 
		<choose>
			<when test='currConCheck == "m"'>
				BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
			</when>
			<otherwise>
				BETWEEN #{startDt} AND #{endDt}
			</otherwise>
		</choose>
			AND ER.STUD_ID = #{studId}
		<if test="types != null">
				AND ER.EXAM_TYPE IN
			<foreach collection="types" item="item" index="index" separator="," open="(" close=")">
				#{item}
			</foreach>
				AND ER.DEL_YN = 'N'
		</if>
		<choose>
			<when test="search != null">	
				AND ER.EXAM_NM LIKE CONCAT('%',#{search},'%')
			</when>
		</choose>
		GROUP BY ER.STUD_ID, ER.EXAM_CD, ER.SMT_ID
		ORDER BY ER.SMT_DTTM DESC
		<choose>
            <when test="startIdx != null">
                LIMIT 10
                OFFSET ${startIdx}
            </when>
            <otherwise>
                LIMIT 10
                OFFSET 0
            </otherwise>
        </choose>
    </select>
    
    <select id="getIncrtNote" parameterType="hashMap" resultType="resultMap">
    	SELECT
			SUM(INCRT_NT_REG_CNT) AS INCRT_NOTE_CNT,
		    SUM(INCRT_NT_FNSH_CNT) AS INCRT_NOTE_FNSH_CNT,
		    (SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)) AS INCRT_NOTE_NC_CNT,
		    NULL AS TOTAL_CNT
		FROM EXAM_RST ER
		WHERE DT 
		<choose>
			<when test='currConCheck == "m"'>
				BETWEEN DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d') AND LAST_DAY(DATE_FORMAT(CONCAT(#{yyyy},#{convertMm},'01'),'%Y-%m-%d'))
			</when>
			<otherwise>
				BETWEEN #{startDt} AND #{endDt}
			</otherwise>
		</choose>
			AND STUD_ID = 4995
    </select>
    
    <select id="getChapterStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getChapterLrn" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getCommMsgCd" parameterType="hashMap" resultType="resultMap">
    </select>
    
</mapper>
