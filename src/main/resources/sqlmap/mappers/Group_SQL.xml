<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Group_1.0">

    <select id="getPeriodWeeks" parameterType="hashMap" resultType="resultMap">
	/* selectPeriodWeeks : 년월, 주차 산출 - 기간정보 */
		SELECT 
			CAST(SUBSTRING(YYMM,1,4) AS SIGNED INTEGER) AS year,
			CAST(SUBSTRING(YYMM,5,2) AS SIGNED INTEGER) AS month,		
			CAST(WK AS SIGNED INTEGER) AS week,
			CONCAT(	IF(#{lrnStartDt} <![CDATA[>]]> IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						, DATE_FORMAT(STR_TO_DATE(#{lrnStartDt}, '%Y-%m-%d'), '%Y.%m.%d')
						, DATE_FORMAT(IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU)))))), '%Y.%m.%d'))
					,'-'
					,DATE_FORMAT(IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))), '%Y.%m.%d')
			) AS dtStr
		FROM COMM_WK_DT
		WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) <![CDATA[>=]]> DATE_FORMAT(#{lrnStartDt}, '%Y-%m-%d')
			AND IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) <![CDATA[<]]> DATE_FORMAT(now() + INTERVAL 3 HOUR , '%Y-%m-%d')
	</select>
	
	<select id="getPeriodMonths" parameterType="hashMap" resultType="resultMap">
	/* selectPeriodMonths : 년월 산출 - 기간정보 */
		SELECT 
			CAST(SUBSTRING(A.YYMM,1,4) AS SIGNED INTEGER) AS year,
			CAST(SUBSTRING(A.YYMM,5,2) AS SIGNED INTEGER) AS month,
			CONCAT( IF( STR_TO_DATE(#{lrnStartDt}, '%Y-%m-%d') > STR_TO_DATE(CONCAT(SUBSTRING(A.YYMM,1,4),SUBSTRING(A.YYMM,5,2),'01'),'%Y%m%d')
						, DATE_FORMAT(#{lrnStartDt}, '%Y.%m.%d')
						, DATE_FORMAT(CONCAT(SUBSTRING(A.YYMM,1,4),'-',SUBSTRING(A.YYMM,5,2),'-01'),'%Y.%m.%d') )
					,'-',
					DATE_FORMAT(LAST_DAY(IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))), '%Y.%m.%d')) AS dtStr
		FROM COMM_WK_DT A 
		JOIN (
			SELECT
				SUBSTRING_INDEX(GROUP_CONCAT(YYMM SEPARATOR '|'),'|', 1) AS START_YYMM,
		        SUBSTRING_INDEX(GROUP_CONCAT(YYMM SEPARATOR '|'),'|', -1) AS END_YYMM
			FROM COMM_WK_DT
			WHERE ( 
					DATE_FORMAT(#{lrnStartDt}, '%Y-%m-%d')
					BETWEEN IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						and IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) 
				  )
				  OR (
					DATE_FORMAT(NOW() + INTERVAL 3 HOUR , '%Y-%m-%d')
					BETWEEN IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU))))))
						and IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO))))))
				  )
		) B ON A.YYMM <![CDATA[>=]]> B.START_YYMM 
			AND A.YYMM <![CDATA[<]]> B.END_YYMM
		GROUP BY YYMM
	</select>
    
    <select id="getStud" parameterType="hashMap" resultType="resultMap">
    /* selectStud : 학습분석 메인 - 학생 정보 */
	    SELECT studNm, gender, studId, loginId, grade, schlNm,
			IFNULL(TIMESTAMPDIFF(DAY, lastLoginDt,now()),-1) AS daysAgo,
			DATE_FORMAT(lastLoginDt,'%Y.%m.%d') AS lastLoginDt,
			DATE_FORMAT(lrnStartDt,'%Y.%m.%d') AS lrnStartDt
			FROM (
					SELECT 
						A.STUD_NM AS studNm,
						A.GENDER,
						A.STUD_ID AS studId,
						A.LOGIN_ID AS loginId,
						A.GRADE,
						A.SCHL_NM AS schlNm,
						MAX(B.DT) AS lastLoginDt, 
						A.START_DT AS lrnStartDt
					FROM STUD A LEFT JOIN DAY_ATT_LOG B ON A.STUD_ID = B.STUD_ID AND B.LOGIN_YN = 'Y'  AND B.DT  <![CDATA[>=]]>  (NOW() - INTERVAL 7 DAY)
					WHERE A.STUD_ID = #{studId}
			) S	    
    </select>
    
    <select id="getLrnBasicPeriod" parameterType="hashMap" resultType="resultMap">
	/* getLrnBasicPeriod : 기관용 기간별 학습 분석 */
		SELECT
		<choose>
            <when test='currConCheck == "w"'>    
			WK.dt
			-- prev
			, PREV_WK.dt AS prevDt 
			,
			</when>
			<otherwise>
			CONCAT(#{startDt}, ' ~ ', #{endDt}) As dt
			, CONCAT(DATE_SUB(IFNULL(PREV_ATT.DT, PREV_LRN.DT), INTERVAL 6 DAY), ' ~ ', IFNULL(PREV_ATT.DT, PREV_LRN.DT)) AS prevDt
			,
			</otherwise>
        </choose>
			CONCAT(DATE_FORMAT(STR_TO_DATE(#{startDt}, '%Y-%m-%d'), '%Y.%m.%d'), '-', DATE_FORMAT(STR_TO_DATE(#{endDt}, '%Y-%m-%d'), '%Y.%m.%d')) AS dtStr
			, ATT.ATT_RT AS attRt		-- 출석률
			, LRN.EX_RT AS exRt			-- 수행률
			, ER.AVG_CRT_RT AS crtRt	-- 정답률
			, IF(LRN.EX_RT > 90, 'A', IF(LRN.EX_RT > 20, 'B', IF(LRN.EX_RT IS NULL, NULL, 'C'))) AS lrnSignal	-- 학습분석신호
			, ROUND( LRN2.LRN_SEC / ATT.ATT_CNT ) AS dayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
			, CONCAT(DATE_FORMAT(DATE_SUB(IFNULL(PREV_ATT.DT, PREV_LRN.DT), INTERVAL 6 DAY), '%Y.%m.%d'), '-', DATE_FORMAT(IFNULL(PREV_ATT.DT, PREV_LRN.DT), '%Y.%m.%d')) AS prevDtStr
			, PREV_ATT.ATT_RT AS prevAttRt		-- 출석률
			, PREV_LRN.EX_RT AS prevExRt		-- 수행률
			, IF(PREV_LRN.EX_RT > 90, 'A', IF(PREV_LRN.EX_RT > 20, 'B', IF(PREV_LRN.EX_RT IS NULL, NULL, 'C'))) AS prevLrnSignal	-- 학습분석신호
			, PREV_ER.AVG_CRT_RT AS prevCrtRt 	-- 정답률
			, ROUND( PREV_LRN2.LRN_SEC / PREV_ATT.ATT_CNT ) AS prevDayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		FROM 
		<choose>
            <when test='currConCheck == "w"'>            
		(	-- 주차
			SELECT 
				MO, GROUP_CONCAT(CONCAT(SUBSTRING(YYMM,5,2),'월',WK,'주차') SEPARATOR ' ~ ') AS dt
			FROM COMM_WK_DT 
			WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO))))))  <![CDATA[>=]]> DATE_FORMAT(#{startDt}, '%Y-%m-%d')
				AND IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU)))))) <![CDATA[<]]> DATE_FORMAT(#{endDt}, '%Y-%m-%d')				
		) AS WK
		LEFT OUTER JOIN (
			SELECT MO, GROUP_CONCAT(CONCAT(SUBSTRING(YYMM,5,2),'월',WK,'주차') SEPARATOR ' ~ ') AS dt
			FROM COMM_WK_DT 
			WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) <![CDATA[>=]]> DATE_SUB(#{startDt}, INTERVAL 7 DAY)
				AND IFNULL(MO, IFNULL(TU, IFNULL(WE, IFNULL(TH, IFNULL(FR, IFNULL(SA, SU)))))) <![CDATA[<]]> DATE_SUB(#{endDt}, INTERVAL 7 DAY)		
		) AS PREV_WK ON PREV_WK.MO = DATE_SUB(WK.MO, INTERVAL 7 DAY)
		,
			</when>
        </choose>
		(	-- 출석률, 선택된 기간 내 로그인 일 수
			SELECT DT, ATT_RT, ATT_CNT 
			FROM DAY_7_ATT_STT
			WHERE STUD_ID = #{studId} AND DT = #{endDt}   
		) AS ATT
		LEFT OUTER JOIN (	-- 출석률, 선택된 기간 내 로그인 일 수
			SELECT DT, ATT_RT, ATT_CNT 
			FROM DAY_7_ATT_STT
			WHERE DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY) AND STUD_ID = #{studId} 			
		) AS PREV_ATT ON PREV_ATT.DT = DATE_SUB(ATT.DT, INTERVAL 7 DAY)
		, (	-- 수행률 : (완료한 학습 수 / 계획된 학습 수) * 100  
			SELECT DT, ROUND(AVG(PLAN_LRN_EX_CNT/PLAN_CNT * 100)) AS EX_RT
			FROM DAY_7_LRN_EX_STT PL 
	        WHERE STUD_ID = #{studId} AND DT = #{endDt}   
        ) AS LRN 
        LEFT OUTER JOIN (	-- 수행률 : (완료한 학습 수 / 계획된 학습 수) * 100 
			SELECT DT, ROUND(AVG(PLAN_LRN_EX_CNT/PLAN_CNT * 100)) AS EX_RT 
			FROM DAY_7_LRN_EX_STT PL 
	        WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY) 
	    ) AS PREV_LRN ON PREV_LRN.DT = DATE_SUB(LRN.DT, INTERVAL 7 DAY)    
        , (	-- 정답률	: (맞은 문항 수 / 전체 문항 수) * 100			
        	SELECT DT, ROUND(AVG(CRT_CNT / QUES_CNT * 100)) AS AVG_CRT_RT
            FROM DAY_7_EXAM_STT 
            WHERE STUD_ID = #{studId} AND DT = #{endDt}    
        ) AS ER 
        LEFT OUTER JOIN (	-- 정답률	: (맞은 문항 수 / 전체 문항 수) * 100		
        	SELECT DT, ROUND(AVG(CRT_CNT / QUES_CNT * 100)) AS AVG_CRT_RT
            FROM DAY_7_EXAM_STT 
            WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY) 
        ) AS PREV_ER ON PREV_ER.DT = DATE_SUB(ER.DT, INTERVAL 7 DAY)    
        , (	-- 선택된 기간 내에 총 학습시간
    		SELECT STUD_ID, SUM(LRN_SEC) AS LRN_SEC
    		FROM
    			DAY_LRN_EX_LOG 
    		WHERE 
            	STUD_ID = #{studId}
            	AND DT BETWEEN #{startDt} AND #{endDt}  
	      		AND SUBJ_CD NOT LIKE '%Z%'
        ) AS LRN2 
        LEFT OUTER JOIN (	-- 이전 선택된 기간 내에 총 학습시간
    		SELECT STUD_ID, SUM(LRN_SEC) AS LRN_SEC
    		FROM
    			DAY_LRN_EX_LOG 
    		WHERE STUD_ID = #{studId} AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt} ,INTERVAL 7 DAY)   		
	      		AND SUBJ_CD NOT LIKE '%Z%'
        ) AS PREV_LRN2 ON LRN2.STUD_ID = PREV_LRN2.STUD_ID
	</select>
	
	<select id="getLrnBasicMonthly" parameterType="hashMap" resultType="resultMap">
	/* selectLrnBasicMonthly : 기관용 월간 학습 분석 */
		SELECT
		    CONCAT(SUBSTRING(#{yyyy},3,2),'년',#{mm},'월') AS dt
			, CONCAT(DATE_FORMAT(STR_TO_DATE(#{startDt}, '%Y-%m-%d'), '%Y.%m.%d'), '-', DATE_FORMAT(STR_TO_DATE(#{endDt}, '%Y-%m-%d'), '%Y.%m.%d')) AS dtStr
			, ATT.ATT_RT AS attRt		-- 출석률
			, LRN.EX_RT AS exRt			-- 수행률
			, ER.AVG_CRT_RT AS crtRt	-- 정답률
			, IF(LRN.EX_RT > 90, 'A', IF(LRN.EX_RT > 20, 'B', IF(LRN.EX_RT IS NULL, NULL, 'C'))) AS lrnSignal	-- 학습분석신호
			, ROUND( LRN.LRN_SEC / ATT.ATT_CNT ) AS dayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		-- prev
			, CONCAT(SUBSTRING(IFNULL(PREV_ATT.YYMM, PREV_LRN.YYMM),3,2),'년',SUBSTRING(IFNULL(PREV_ATT.YYMM, PREV_LRN.YYMM),5,2),'월') AS prevDt
			, CONCAT(DATE_FORMAT(STR_TO_DATE(CONCAT(IFNULL(PREV_ATT.YYMM, PREV_LRN.YYMM),'01'), '%Y%m%d'), '%Y.%m.%d'), '-', DATE_FORMAT(LAST_DAY(STR_TO_DATE(CONCAT(IFNULL(PREV_ATT.YYMM, PREV_LRN.YYMM),'01'), '%Y%m%d')), '%Y.%m.%d')) AS prevDtStr
			, PREV_ATT.ATT_RT AS prevAttRt		-- 출석률
			, PREV_LRN.EX_RT AS prevExRt		-- 수행률
			, IF(PREV_LRN.EX_RT > 90, 'A', IF(PREV_LRN.EX_RT > 20, 'B', IF(PREV_LRN.EX_RT IS NULL, NULL, 'C'))) AS prevLrnSignal	-- 학습분석신호
			, PREV_ER.AVG_CRT_RT AS prevCrtRt 	-- 정답률
			, ROUND( PREV_LRN.LRN_SEC / PREV_ATT.ATT_CNT ) AS prevDayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		FROM 
		(	-- 출석률, 선택된 기간 내 로그인 일 수
			SELECT YYMM, ATT_RT, ATT_CNT
			FROM MONTH_ATT_STT
			WHERE YYMM = #{yymm} AND STUD_ID = #{studId}
		) AS ATT
		LEFT OUTER JOIN (	-- 이전 출석률, 선택된 기간 내 로그인 일 수
			SELECT YYMM, ATT_RT, ATT_CNT 
			FROM MONTH_ATT_STT
			WHERE YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m') AND STUD_ID = #{studId} 			
		) AS PREV_ATT ON PREV_ATT.YYMM = DATE_FORMAT(DATE_SUB(DATE_FORMAT(CONCAT(ATT.YYMM,'01'), '%Y%m%d'), INTERVAL 1 MONTH), '%Y%m')
		, (	-- 수행률, 학습시간	
			SELECT YYMM, ROUND(PLAN_LRN_EX_CNT/PLAN_CNT * 100) AS EX_RT, LRN_SEC
			FROM MONTH_LRN_EX_STT PL 
	       	WHERE YYMM = #{yymm} AND STUD_ID = #{studId}
        ) AS LRN 
        LEFT OUTER JOIN (	-- 이전 수행률, 학습시간	
			SELECT YYMM, ROUND(PLAN_LRN_EX_CNT/PLAN_CNT * 100) AS EX_RT, LRN_SEC
			FROM MONTH_LRN_EX_STT PL 
	       	WHERE YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m') AND STUD_ID = #{studId}
        ) AS PREV_LRN ON PREV_LRN.YYMM = DATE_FORMAT(DATE_SUB(DATE_FORMAT(CONCAT(LRN.YYMM,'01'), '%Y%m%d'), INTERVAL 1 MONTH), '%Y%m')
        , (	-- 정답률		
        	SELECT STUD_ID, ROUND(AVG(CRT_RT)) AS AVG_CRT_RT
            FROM EXAM_RST 
            WHERE 
            	STUD_ID = #{studId}
            	AND DT BETWEEN  #{startDt} AND #{endDt} 
                AND DEL_YN = 'N' 
                AND CRT_RT <![CDATA[>=]]> 0
        ) AS ER 
        LEFT OUTER JOIN (	-- 정답률		
        	SELECT STUD_ID, ROUND(AVG(CRT_RT)) AS AVG_CRT_RT
            FROM EXAM_RST 
            WHERE 
            	STUD_ID = #{studId}
            	AND DT BETWEEN  DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
                AND DEL_YN = 'N' 
                AND CRT_RT <![CDATA[>=]]> 0
        ) AS PREV_ER ON ER.STUD_ID = PREV_ER.STUD_ID
	</select>
    
    <select id="getOrgEnvConfig" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="setOrgEnvConfig" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getLrnHabitPeriod" parameterType="hashMap" resultType="resultMap">
	    SELECT
			ATT.ATT_RT AS attHabit						-- 약속을 지키는 습관(출석률) 
			, LRN.EX_RT AS planHabit					-- 계획을 실천하는 습관(수행률) 
			, EX.INCRT_NT_CNT AS incrtNoteHabit			-- 오답노트 확인 습관(오답노트수) 
			, ALRN.SUBJ_CD AS aLrnHabit					-- 스스로 찾아 학습하는 습관(과목코드)
			, EX.IMPRV_SLV_HABIT_CNT AS slvHabit		-- 문제풀이 습관(고쳐야할 문제 수) 
			, ROUND( LRN2.LRN_SEC / ATT.ATT_CNT ) AS concnHabit	-- 학습에 집중하는 습관(1일평균학습시간)  : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)
		FROM 
		(	-- 출석률, 선택된 기간 내 로그인 일 수
			SELECT ATT_RT, ATT_CNT 
			FROM DAY_7_ATT_STT
			WHERE STUD_ID = #{studId} AND DT = #{endDt}   
		) AS ATT
		, (	-- 수행률
			SELECT ROUND(AVG(PLAN_LRN_EX_CNT/PLAN_CNT * 100)) AS EX_RT
			FROM DAY_7_LRN_EX_STT PL 
		    WHERE STUD_ID = #{studId} AND DT = #{endDt} 
		) AS LRN 
		, ( -- 미완료된 오답노트수, 고쳐야할 문제 수 : (건너뛴 문제 수+급하게 풀어 틀린 문제 수+찍은 것으로 보이는 문제 수+실수한 문제 수)
			SELECT INCRT_NT_CNT, IMPRV_SLV_HABIT_CNT
			FROM DAY_7_EXAM_STT
			WHERE STUD_ID = #{studId} AND DT = #{endDt} 
		) AS EX 
		, (	-- 스스로 찾아 학습하는 습관(과목코드) 
			SELECT SUBJ_CD
			FROM DAY_SUBJ_A_LRN_EX_STT
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} 
			ORDER BY A_LRN_EX_CNT DESC
			LIMIT 1 
		) AS ALRN
		, ( -- 학습시간	
			SELECT SUM(LRN_SEC) AS LRN_SEC
			FROM DAY_LRN_EX_LOG 
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt}	
				AND SUBJ_CD NOT LIKE '%Z%'
		) AS LRN2 
    </select>
    
    <select id="getLrnHabitMonthly" parameterType="hashMap" resultType="resultMap">
		SELECT
			ATT_RT AS attHabit							-- 약속을 지키는 습관(출석률)
			, LRN.EX_RT AS planHabit					-- 계획을 실천하는 습관(수행률) 
			, EX.INCRT_NT_CNT AS incrtNoteHabit			-- 오답노트 확인 습관(오답노트수) 
			, ALRN.SUBJ_CD AS aLrnHabit					-- 스스로 찾아 학습하는 습관(과목코드)
			, EX.IMPRV_SLV_HABIT_CNT AS slvHabit		-- 문제풀이 습관(고쳐야할 문제 수) 
			, ROUND( LRN.LRN_SEC / ATT.ATT_CNT ) AS concnHabit	-- 학습에 집중하는 습관(1일평균학습시간)  : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)
		FROM 
		(	-- 출석률, 선택된 기간 내 로그인 일 수
			SELECT ATT_RT, ATT_CNT 
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId}  AND YYMM = #{yymm}
		) AS ATT
		, (	-- 수행률, 학습시간	
			SELECT ROUND(AVG(PLAN_LRN_EX_CNT/PLAN_CNT * 100)) AS EX_RT
					, LRN_SEC
			FROM MONTH_LRN_EX_STT PL 
		    WHERE STUD_ID = #{studId}  AND YYMM = #{yymm}
		) AS LRN 
		, ( -- 미완료된 오답노트수, 고쳐야할 문제 수 : (건너뛴 문제 수+급하게 풀어 틀린 문제 수+찍은 것으로 보이는 문제 수+실수한 문제 수)
			SELECT ( IFNULL(INCRT_NT_REG_CNT, 0) - IFNULL(INCRT_NT_FNSH_CNT, 0) ) AS INCRT_NT_CNT
				, ( IFNULL(SKIP_QUES_CNT,0) + IFNULL(CURSORY_QUES_CNT,0) + IFNULL(GUESS_INCRT_QUES_CNT,0) + IFNULL(MISTAKE_QUES_CNT,0) ) AS IMPRV_SLV_HABIT_CNT
			FROM EXAM_MONTH_STT
			WHERE STUD_ID = #{studId}  AND YYMM = #{yymm}
		) AS EX 
		, (	-- 스스로 찾아 학습하는 습관(과목코드) 
			SELECT SUBJ_CD
			FROM MONTH_SUBJ_A_LRN_EX_STT
			WHERE STUD_ID = #{studId}  AND YYMM = #{yymm}
			ORDER BY A_LRN_EX_CNT DESC
			LIMIT 1 
		) AS ALRN    
    </select>
    
    <select id="getLrnHabitChartList" parameterType="hashMap" resultType="resultMap">
	    SELECT
			DATE_FORMAT(STR_TO_DATE(DT.dt, '%Y-%m-%d'), '%Y.%m.%d') AS dt
			, ROUND( LRN.FNSH_PLAN_EX_CNT / LRN.PLAN_EX_CNT * 100 )  AS exRt	-- 수행률
			, ER.CRT_RT AS crtRt		-- 정답률
			, LRN2.LRN_SEC AS dayLrnTm	-- 일평균 학습시간 : (선택된 기간 내에 총 학습시간 / 선택된 기간 내 로그인 일 수)	
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS dt
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
			FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt}   
			) a  
		) DT 
		LEFT OUTER JOIN (	-- 수행률
			SELECT 
			 	DT,
			 	COUNT(*) AS PLAN_EX_CNT,
				SUM(IF(FNSH_YN = 'Y', 1, 0)) AS FNSH_PLAN_EX_CNT
			FROM DAY_LRN_EX_LOG PL 
		    WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} AND PLAN_DT IS NOT NULL	
			GROUP BY DT
		) AS LRN ON DT.dt = LRN.DT
		LEFT OUTER JOIN (	-- 정답률	: (맞은 문항 수 / 전체 문항 수) * 100		
			SELECT DT,  
				CASE
		            WHEN SUM(QUES_CNT) = 0 THEN 0
		            WHEN SUM(DESCPT_QUES_CNT)> 0
		            	THEN ROUND( SUM(CRT_CNT + DESCPT_CRT_CNT) / SUM(QUES_CNT + DESCPT_QUES_CNT) * 100 ) 
		        	ELSE ROUND( SUM(CRT_CNT) / SUM(QUES_CNT) * 100 )
		        END AS CRT_RT
		    FROM EXAM_RST
		    WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} AND DEL_YN = 'N'
			GROUP BY DT
		) AS ER ON LRN.DT = ER.DT
		LEFT OUTER JOIN (	-- 학습시간	
			SELECT DT, SUM(LRN_SEC) AS LRN_SEC
			FROM
				DAY_LRN_EX_LOG 
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} 				
				AND SUBJ_CD NOT LIKE '%Z%'
			GROUP BY DT
		) AS LRN2 ON LRN.DT = LRN2.DT		
		ORDER BY DT.dt ASC
    </select>
        
    <select id="getAttRtSttPeriod" parameterType="hashMap" resultType="resultMap">
    	SELECT ATT.ATT_RT AS attRt			-- 출석률
			, PREV_ATT.ATT_RT AS prevAttRt	-- 이전 출석률
		FROM
		(
			SELECT STUD_ID, ATT_RT
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = #{endDt}
		) AS ATT
		,
		(
			SELECT STUD_ID, ATT_RT
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY)
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID
    </select>
    
    <select id="getAttRtSttMonthly" parameterType="hashMap" resultType="resultMap">
    	SELECT  ATT.ATT_RT AS attRt				-- 출석률
				, PREV_ATT.ATT_RT AS prevAttRt  -- 이전 출석률
		FROM (	
			SELECT STUD_ID, ATT_RT 
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm}
		) AS ATT
		LEFT OUTER JOIN
		(
			SELECT STUD_ID, ATT_RT 
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m')
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID
    </select>
    
    <select id="getAttRtSttDetail" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			DT.DT AS dt 			-- 날짜 
			, IF(ATT.LOGIN_YN = 'Y', 1, 0) AS attYn  -- 출석여부 
			, IF(PL.PLAN_CNT > 0 AND PL.PLAN_CNT = LR.FNSH_CNT, '학습완료'
				, IF(PL.PLAN_CNT > 0 AND LR.FNSH_CNT > 0 AND PL.PLAN_CNT > LR.FNSH_CNT,'부분완료'
				, IF(PL.PLAN_CNT > 0 AND LR.FNSH_CNT = 0, '학습전'
				, IF(ATT.LOGIN_YN = 'Y', '출석', null)))) 
				AS lrnStt -- 학습현황 (학습완료, 부분완료, 학습전, 출석)
			, IF(PL.PLAN_CNT > 0 AND PL.PLAN_CNT = LR.FNSH_CNT, 1, 0) AS lrnFnsh						-- 학습완료 
			, IF(PL.PLAN_CNT > 0 AND LR.FNSH_CNT > 0 AND PL.PLAN_CNT > LR.FNSH_CNT, 1, 0) AS partFnsh	-- 부분완료
			, IF(PL.PLAN_CNT > 0 AND LR.FNSH_CNT = 0, 1, 0) AS lrnBefore								-- 학습전
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS DT
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
			FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt}   
			) a  
		) AS DT 
		LEFT OUTER JOIN DAY_PLAN_STT AS PL ON DT.DT = PL.DT
		LEFT OUTER JOIN 
		(
			SELECT 
				DT, SUM(FNSH_CNT) AS FNSH_CNT
			FROM ( 
				SELECT 
					DT, SERVICE_ID
					, SUM(IF(FNSH_YN = 'Y', 1, 0)) AS FNSH_CNT
				FROM DAY_LRN_EX_LOG 
				WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} 
					AND SERVICE_ID IS NOT NULL
				GROUP BY DT, SERVICE_ID
			) A GROUP BY DT
		) AS LR ON PL.DT = LR.DT 
		LEFT OUTER JOIN 
		(
			SELECT DT, LOGIN_YN
			FROM DAY_ATT_LOG
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt} 			
			GROUP BY DT
		) AS ATT ON PL.DT = ATT.DT 
		WHERE PL.STUD_ID = #{studId} AND PL.DT BETWEEN #{startDt} AND #{endDt}		
		ORDER BY DT.DT 
    </select>
    
    <select id="getLrnTmList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			SERVICE_ID,
		    SUBJ_CD,
		    EX_DTTM,
		    CATEGORY,
		    LRN_SEC,
		    STD_LRN_TM,
		    CASE
				WHEN FNSH_CNT > 0 THEN 
					CASE
						WHEN FNSH_YN = 'Y' AND DATE_FORMAT(END_CHECK,'%Y%m%d') = DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '계획+'
						WHEN FNSH_YN = 'Y' AND DATE_FORMAT(END_CHECK,'%Y%m%d') <![CDATA[<]]> DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '일찍+'
						WHEN FNSH_YN = 'Y' AND DATE_FORMAT(END_CHECK,'%Y%m%d') <![CDATA[>]]> DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '나중에+'
						WHEN FNSH_YN = 'N' AND PLAN_DT IS NOT NULL THEN '-'
						ELSE '안했어요'
					END
				ELSE EX_TYPE
		    END AS EX_TYPE,
		    PLAN_DT
		FROM (
			SELECT
				SERVICE_ID,
				SUBJ_CD,
				CONCAT
				(
					DT,
					'(',
					CASE DAYOFWEEK(DT)
						WHEN '1' THEN '일요일'
						WHEN '2' THEN '월요일'
						WHEN '3' THEN '화요일'
						WHEN '4' THEN '수요일'
						WHEN '5' THEN '목요일'
						WHEN '6' THEN '금요일'
						WHEN '7' THEN '토요일'
					END,
					') ',
					CASE WHEN PLAN_DT IS NOT NULL AND START_DTTM IS NULL THEN '-' ELSE DATE_FORMAT(START_DTTM,'%H:%i') END,
					CASE WHEN START_DTTM IS NULL THEN '' ELSE ' ~ ' END,
					IFNULL(DATE_FORMAT(END_DTTM,'%H:%i'), '')
				) AS EX_DTTM,
				CONCAT(
					' > ',
					IFNULL(LRN_GRADE,''),
					CASE WHEN LRN_GRADE IS NOT NULL THEN '학년' ELSE '' END,
					IFNULL(LRN_TERM,''),
					CASE WHEN LRN_TERM IS NOT NULL THEN ' 학기 > ' ELSE '' END,
					SUB_SUBJ_NM,' > ',
					IFNULL(CTGR,SUB_SUBJ_NM)
				) AS CATEGORY,
				CASE
					WHEN ( PLAN_DT IS NOT NULL AND START_DTTM IS NULL ) THEN NULL 
					ELSE LRN_SEC
				END AS LRN_SEC,
				STD_LRN_TM,
				CASE 
					WHEN FNSH_YN = 'Y' AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL AND DATE_FORMAT(END_DTTM,'%Y%m%d') = DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '계획'
					WHEN FNSH_YN = 'Y' AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL AND DATE_FORMAT(END_DTTM,'%Y%m%d') <![CDATA[<]]> DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '일찍'
					WHEN FNSH_YN = 'Y' AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL AND DATE_FORMAT(END_DTTM,'%Y%m%d') <![CDATA[>]]> DATE_FORMAT(PLAN_DT,'%Y%m%d') THEN '나중에'
					WHEN FNSH_YN = 'Y' AND PLAN_DT IS NULL AND LRN_SEC <![CDATA[>=]]> 30 THEN '스스로'
					WHEN FNSH_YN = 'Y' AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN = 'Y' THEN '스스로'
					WHEN FNSH_YN = 'N' OR  (FNSH_YN = 'Y' AND PLAN_DT IS NULL AND LRN_SEC <![CDATA[<]]> 30) THEN '학습중'
					ELSE '안했어요'
				END AS EX_TYPE,
				CASE
				WHEN PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL THEN
				(
					CONCAT
					(
						PLAN_DT,
						'(',
						CASE DAYOFWEEK(PLAN_DT)
							WHEN '1' THEN '일요일'
							WHEN '2' THEN '월요일'
							WHEN '3' THEN '화요일'
							WHEN '4' THEN '수요일'
							WHEN '5' THEN '목요일'
							WHEN '6' THEN '금요일'
							WHEN '7' THEN '토요일'
						END,
						') '
					)
				)
				ELSE NULL
			END AS PLAN_DT,
		    PLAN_DT AS PLAN_DAY,
		    FNSH_YN,
		    (SELECT COUNT(*) FROM DAY_LRN_EX_LOG WHERE PLAN_DT = DL.PLAN_DT AND STUD_ID = DL.STUD_ID AND SERVICE_ID = DL.SERVICE_ID AND DT <![CDATA[<]]> DL.DT AND FNSH_YN = 'Y') AS FNSH_CNT,
		    (SELECT MIN(END_DTTM) FROM DAY_LRN_EX_LOG WHERE PLAN_DT = DL.PLAN_DT AND STUD_ID = DL.STUD_ID AND SERVICE_ID = DL.SERVICE_ID AND DT <![CDATA[<]]> DL.DT AND FNSH_YN = 'Y') AS END_CHECK
			FROM DAY_LRN_EX_LOG DL
			WHERE DT BETWEEN #{startDt} AND #{endDt}
       			AND STUD_ID = #{studId} 
		) DL1;
    </select>
        
    <select id="getAttCntSttPeriod" parameterType="hashMap" resultType="resultMap">
	    SELECT ATT.ATT_CNT AS attRt					-- 출석률
			, PREV_ATT.ATT_CNT AS prevAttRt			-- 이전 출석률
			, ATT.PLAN_DAY_CNT AS planCnt			-- 계획일 수
			, PREV_ATT.PLAN_DAY_CNT AS prevPlanCnt	-- 이전 계획일 수
			, GRP_ATT.TOP_30_ATT_CNT AS topAttCnt	-- 상위 출석일 수 
			, GRP_ATT.GRP_AVG_ATT_CNT AS avgAttCnt	-- 평균 출석일 수 
		FROM 	
		(	-- 선택된 기간 내 로그인 일 수, 계획일수
			SELECT DT, STUD_ID, ATT_CNT, PLAN_DAY_CNT
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = #{endDt} 
		) AS ATT
		LEFT OUTER JOIN ( 	-- 상위 출석일수, 평균 출석일수		
			SELECT DT, TOP_30_ATT_CNT, GRP_AVG_ATT_CNT			
			FROM DAY_7_GRP_LRN_EX_STT
			WHERE DT = #{endDt} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_ATT  ON ATT.DT = GRP_ATT.DT
		LEFT OUTER JOIN (	-- 선택된 기간 내 로그인 일 수, 계획일수
			SELECT STUD_ID, ATT_CNT, PLAN_DAY_CNT
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY)
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID	
    </select>
    
    
    <select id="getAttCntSttMonthly" parameterType="hashMap" resultType="resultMap">
	    SELECT ATT.ATT_CNT AS attRt					-- 출석률
			, PREV_ATT.ATT_CNT AS prevAttRt			-- 이전 출석률
			, ATT.PLAN_DAY_CNT AS planCnt			-- 계획일 수
			, PREV_ATT.PLAN_DAY_CNT AS prevPlanCnt	-- 이전 계획일 수
			, GRP_ATT.TOP_30_ATT_CNT AS topAttCnt	-- 상위 출석일 수 
			, GRP_ATT.GRP_AVG_ATT_CNT AS avgAttCnt	-- 평균 출석일 수 
		FROM 	
		(	-- 선택된 기간 내 로그인 일 수, 계획일수
			SELECT YYMM, STUD_ID, ATT_CNT, PLAN_DAY_CNT
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm} 
		) AS ATT
		LEFT OUTER JOIN ( 	-- 상위 출석일수, 평균 출석일수		
			SELECT YYMM, TOP_30_ATT_CNT, GRP_AVG_ATT_CNT			
			FROM MONTH_GRP_LRN_EX_STT
			WHERE YYMM = #{yymm} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_ATT  ON ATT.YYMM = GRP_ATT.YYMM
		LEFT OUTER JOIN (	-- 선택된 기간 내 로그인 일 수, 계획일수
			SELECT STUD_ID, ATT_CNT, PLAN_DAY_CNT
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = DATE_FORMAT(DATE_SUB(#{startDt},INTERVAL 1 MONTH),'%Y%m')
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID			
    </select>
    
    <select id="getAttCntSttDetail" parameterType="hashMap" resultType="resultMap">
	    SELECT DT.dt		-- 날짜
			, ATT.planDt	-- 학습계획일
			, ATT.attDt		-- 출석일
			, IF(GRADE_ATT.ATT_CNT > (GRADE_ATT.STUD_CNT * 0.3), 1, 0) AS topAttDt	-- 상위출석일
			, IF(GRADE_ATT.ATT_CNT > (GRADE_ATT.STUD_CNT * 0.5), 1, 0) AS avgAttDt	-- 평균출석일
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS dt
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
			FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt}   
			) a  
		) AS DT 
		LEFT OUTER JOIN (
			SELECT DT -- 날짜
				, IF(PLAN_YN = 'Y', 1, 0) AS planDt	-- 학습계획일
				, IF(LOGIN_YN = 'Y', 1, 0) AS attDt	-- 출석일
			FROM DAY_ATT_LOG
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt}
		) AS ATT ON DT.dt = ATT.DT
		LEFT OUTER JOIN (
			SELECT 
				A.DT -- 날짜
				, SUM(IF(A.LOGIN_YN = 'Y', 1, 0)) AS ATT_CNT	-- 출석일
				, (SELECT COUNT(STUD_ID) 
					FROM STUD 
					WHERE GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})) AS STUD_CNT 
			FROM (	
				SELECT STUD_ID 
				FROM STUD 
				WHERE GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
			) AS S
			JOIN DAY_ATT_LOG AS A
			ON S.STUD_ID = A.STUD_ID 
			WHERE A.DT BETWEEN #{startDt} AND #{endDt}
			GROUP BY A.DT
		) AS GRADE_ATT ON DT.dt = GRADE_ATT.DT
    </select>
    
    <select id="getLoginPtnSttPeriod" parameterType="hashMap" resultType="resultMap">
   		SELECT ATT.loginPtn							-- 로그인패턴
				, PREV_ATT.loginPtn AS prevLoginPtn	-- 이전 로그인패턴
		FROM 
		(	-- 로그인패턴
			SELECT STUD_ID, IF((LOGIN_PTN_CNT / ATT_CNT * 100) >= 50, 1, 0) AS loginPtn
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = #{endDt}
		) AS ATT
		LEFT OUTER JOIN
		(	-- 로그인패턴
			SELECT STUD_ID, IF((LOGIN_PTN_CNT / ATT_CNT * 100) >= 50, 1, 0) AS loginPtn
			FROM DAY_7_ATT_STT 
			WHERE STUD_ID = #{studId} AND DT = (DATE_FORMAT(#{endDt},'%Y-%m-%d') - interval 7 DAY)
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID
    </select>
    
    <select id="getLoginPtnSttMonthly" parameterType="hashMap" resultType="resultMap">
   		SELECT ATT.loginPtn							-- 로그인패턴
				, PREV_ATT.loginPtn AS prevLoginPtn	-- 이전 로그인패턴
		FROM 
		(	-- 로그인패턴
			SELECT STUD_ID, IF((LOGIN_PTN_CNT / ATT_CNT * 100) >= 50, 1, 0) AS loginPtn
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm}
		) AS ATT
		LEFT OUTER JOIN
		(	-- 로그인패턴
			SELECT STUD_ID, IF((LOGIN_PTN_CNT / ATT_CNT * 100) >= 50, 1, 0) AS loginPtn
			FROM MONTH_ATT_STT 
			WHERE STUD_ID = #{studId} AND YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m')
		) AS PREV_ATT ON ATT.STUD_ID = PREV_ATT.STUD_ID
    </select>
    
    <select id="getLoginPtnSttDetail" parameterType="hashMap" resultType="resultMap">
   		SELECT DT.dt	
		<choose>
          	<when test='currConCheck == "m"'>  
				, DATE_SUB(DT.dt, INTERVAL 1 MONTH) AS prevDt		-- 이전날짜 
			</when>
			<otherwise>
				, DATE_SUB(DT.dt, INTERVAL 7 DAY) AS prevDt			-- 이전날짜 
			</otherwise>
		</choose>
				, ATT.FIRST_LOGIN_DTTM AS loginTm			-- 로그인패턴
				, PREV_ATT.FIRST_LOGIN_DTTM AS prevLoginTm	-- 이전 로그인패턴
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS dt
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
				FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt}   
			) a  
		) AS DT 
		LEFT OUTER JOIN
		(	-- 로그인패턴
			SELECT DT, FIRST_LOGIN_DTTM
			FROM DAY_ATT_LOG 
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endtDt}		
		) AS ATT ON DT.dt = ATT.DT
		LEFT OUTER JOIN
		(	-- 로그인패턴
			SELECT DT, FIRST_LOGIN_DTTM
				FROM DAY_ATT_LOG 
		<choose>
            <when test='currConCheck == "m"'>    
				WHERE STUD_ID = #{studId} AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
		) AS PREV_ATT ON DATE_SUB(DT.dt, INTERVAL 1 MONTH) = PREV_ATT.DT	
			</when>
			<otherwise>
				WHERE STUD_ID = #{studId} AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
		) AS PREV_ATT ON DATE_SUB(DT.dt, INTERVAL 7 DAY) = PREV_ATT.DT	
			</otherwise>
		</choose>
		ORDER BY dt
    </select>
    
    <select id="getExRtSttPeriod" parameterType="hashMap" resultType="resultMap">
		SELECT EX.EX_RT AS exRt
			, PREV_EX.EX_RT AS prevExRt
			, GRP_EX.TOP_30_EX_RT AS topExCnt		-- 상위 수행률
			, GRP_EX.GRP_AVG_EX_RT AS avgExCnt		-- 평균 수행률
		FROM(
			SELECT DT, STUD_ID, 
				ROUND( PLAN_LRN_EX_CNT / PLAN_CNT * 100 ) EX_RT 
			FROM DAY_7_LRN_EX_STT EX	
			WHERE STUD_ID = #{studId} AND DT = #{endDt}
		) AS EX
		LEFT OUTER JOIN ( 	-- 상위 수행률, 평균 수행률 
			SELECT DT, TOP_30_EX_RT, GRP_AVG_EX_RT			
			FROM DAY_7_GRP_LRN_EX_STT
			WHERE DT = #{endDt} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_EX ON EX.DT = GRP_EX.DT	
		LEFT OUTER JOIN (
			SELECT STUD_ID, 
				ROUND( PLAN_LRN_EX_CNT / PLAN_CNT * 100 ) EX_RT 
			FROM DAY_7_LRN_EX_STT EX	
			WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY)
		) AS PREV_EX ON EX.STUD_ID = PREV_EX.STUD_ID
    </select>
    
    <select id="getExRtSttMonthly" parameterType="hashMap" resultType="resultMap">
    	SELECT EX.EX_RT AS exRt
			, PREV_EX.EX_RT AS prevExRt
			, GRP_EX.TOP_30_EX_RT AS topExCnt		-- 상위 수행률
			, GRP_EX.GRP_AVG_EX_RT AS avgExCnt		-- 평균 수행률
		FROM(
			SELECT YYMM, STUD_ID, 
				ROUND( PLAN_LRN_EX_CNT / PLAN_CNT * 100 ) EX_RT 
			FROM MONTH_LRN_EX_STT 	
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm}
		) AS EX
		LEFT OUTER JOIN ( 	-- 상위 수행률, 평균 수행률 
			SELECT YYMM, TOP_30_EX_RT, GRP_AVG_EX_RT			
			FROM MONTH_GRP_LRN_EX_STT
			WHERE YYMM = #{yymm} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_EX ON EX.YYMM = GRP_EX.YYMM	
		LEFT OUTER JOIN (
			SELECT STUD_ID, 
				ROUND( PLAN_LRN_EX_CNT / PLAN_CNT * 100 ) EX_RT 
			FROM MONTH_LRN_EX_STT 	
			WHERE STUD_ID = #{studId} AND YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m')
		) AS PREV_EX ON EX.STUD_ID = PREV_EX.STUD_ID
    </select>
    
    <select id="getExRtSttDetail" parameterType="hashMap" resultType="resultMap">
    	SELECT DT.dt		-- 날짜
    	<choose>
            <when test='currConCheck == "m"'>  
			, DATE_SUB(DT.dt, INTERVAL 1 MONTH) AS prevDt		-- 이전날짜 
			</when>
			<otherwise>
		 	, DATE_SUB(DT.dt, INTERVAL 7 DAY) AS prevDt			-- 이전날짜 
		 	</otherwise>
		 </choose>
			, EX.EX_RT AS exRt				-- 수행률
			, PREV_EX.EX_RT AS prevExRt		-- 이전 수행률 
			, GRP_EX.TOP_30_EX_RT AS topExRt		-- 상위수행률 
			, GRP_EX.GRP_AVG_EX_RT AS avgExRt		-- 평균수행률
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS dt
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
			FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt}   
			) a  
		) AS DT 
		LEFT OUTER JOIN (	
			SELECT PL.DT
				, CASE
		            WHEN PL.PLAN_CNT = 0 THEN 0
		            WHEN ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100) > 100 THEN 100
		            ELSE ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100)
		        END AS EX_RT
			FROM
			(                  
				SELECT DT -- 날짜
					, PLAN_CNT
				FROM DAY_PLAN_STT
				WHERE STUD_ID = #{studId}
					AND DT BETWEEN #{startDt} AND #{endDt}
				GROUP BY DT
			) AS PL 
			JOIN (
				SELECT DT -- 날짜
					, COUNT(DISTINCT SERVICE_ID) AS LRN_EX_CNT
				FROM DAY_LRN_EX_LOG
				WHERE STUD_ID = #{studId}
					AND PLAN_DT BETWEEN #{startDt} AND #{endDt}
					AND FNSH_YN = 'Y'
				GROUP BY DT
			) AS LRN ON PL.DT = LRN.DT
		) AS EX ON DT.dt = EX.DT
		LEFT OUTER JOIN
		(	
		<choose>
            <when test='currConCheck == "m"'>    
				SELECT PL.DT
					, CASE
			            WHEN PL.PLAN_CNT = 0 THEN 0
			            WHEN ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100) > 100 THEN 100
			            ELSE ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100)
			        END AS EX_RT
				FROM
				(                  
					SELECT DT -- 날짜
						, PLAN_CNT
					FROM DAY_PLAN_STT
					WHERE STUD_ID = #{studId} 
						AND PLAN_DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
						AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					GROUP BY DT
				) AS PL 
				JOIN (
					SELECT DT, PLAN_DT -- 날짜
						, COUNT(DISTINCT SERVICE_ID) AS LRN_EX_CNT
					FROM DAY_LRN_EX_LOG
					WHERE STUD_ID = #{studId} 
						AND PLAN_DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
						AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
						AND FNSH_YN = 'Y'
					GROUP BY PLAN_DT
				) AS LRN ON PL.DT = LRN.PLAN_DT
			) AS PREV_EX ON PREV_EX.DT = DATE_SUB(DT.dt, INTERVAL 1 MONTH)
			LEFT OUTER JOIN 
			(
				SELECT DT, TOP_30_EX_RT, GRP_AVG_EX_RT
				FROM DAY_GRP_LRN_EX_STT
				WHERE DT BETWEEN #{startDt} AND LAST_DAY(#{startDt})
						AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId} )
			) AS GRP_EX ON DT.dt = GRP_EX.DT
			</when>
			<otherwise>
				SELECT PL.DT
					, CASE
			            WHEN PL.PLAN_CNT = 0 THEN 0
			            WHEN ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100) > 100 THEN 100
			            ELSE ROUND(LRN.LRN_EX_CNT / PL.PLAN_CNT * 100)
			        END AS EX_RT
				FROM
				(                  
					SELECT DT -- 날짜
						, PLAN_CNT
					FROM DAY_PLAN_STT
					WHERE STUD_ID = #{studId} 
						AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					GROUP BY DT
				) AS PL 
				JOIN (
					SELECT DT, PLAN_DT -- 날짜
						, COUNT(DISTINCT SERVICE_ID) AS LRN_EX_CNT
					FROM DAY_LRN_EX_LOG
					WHERE STUD_ID = #{studId} 
						AND PLAN_DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
						AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
						AND FNSH_YN = 'Y'
					GROUP BY PLAN_DT
				) AS LRN ON PL.DT = LRN.PLAN_DT
			) AS PREV_EX ON PREV_EX.DT = DATE_SUB(DT.dt, INTERVAL 7 DAY)
			LEFT OUTER JOIN 
			(
				SELECT DT, TOP_30_EX_RT, GRP_AVG_EX_RT
				FROM DAY_GRP_LRN_EX_STT
				WHERE DT BETWEEN #{startDt} AND #{endDt}
						AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
			) AS GRP_EX ON DT.dt = GRP_EX.DT
			</otherwise>
		</choose>
		ORDER BY DT.dt
    </select>
    
    <select id="getFnshLrnExSttPeriod" parameterType="hashMap" resultType="resultMap">
    	SELECT 
    		LRN.PLAN_LRN_EX_CNT AS fnshLrnCnt
			, PREV_LRN.PLAN_LRN_EX_CNT AS prevFnshLrnCnt
			, GRP_LRN.TOP_30_LRN_CNT AS topFnshLrnCnt
			, GRP_LRN. GRP_AVG_LRN_CNT AS avgFnshLrnCnt
		FROM 
		(
			SELECT DT, STUD_ID 
					, PLAN_LRN_EX_CNT
			FROM DAY_7_LRN_EX_STT
			WHERE STUD_ID = #{studId} AND DT = #{endDt}		
		) AS LRN
		LEFT OUTER JOIN (	
			SELECT DT, STUD_ID 
					, PLAN_LRN_EX_CNT
			FROM DAY_7_LRN_EX_STT
			WHERE STUD_ID = #{studId} AND DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY)
		) AS PREV_LRN ON PREV_LRN.DT = DATE_SUB(LRN.DT, INTERVAL 7 DAY)
		LEFT OUTER JOIN (	
			SELECT DT, TOP_30_LRN_CNT, GRP_AVG_LRN_CNT
			FROM DAY_7_GRP_LRN_EX_STT
			WHERE DT = #{endDt} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_LRN ON LRN.DT = GRP_LRN.DT	
    </select>
    
    <select id="getFnshLrnExSttMonthly" parameterType="hashMap" resultType="resultMap">
    	SELECT 
    		LRN.PLAN_LRN_EX_CNT AS fnshLrnCnt
			, PREV_LRN.PLAN_LRN_EX_CNT AS prevFnshLrnCnt
			, GRP_LRN.TOP_30_LRN_CNT AS topFnshLrnCnt
			, GRP_LRN. GRP_AVG_LRN_CNT AS avgFnshLrnCnt
		FROM 
		(
			SELECT YYMM, STUD_ID 
					, PLAN_LRN_EX_CNT
			FROM MONTH_LRN_EX_STT
			WHERE STUD_ID = #{studId} AND YYMM = #{yymm}
		) AS LRN
		LEFT OUTER JOIN (	
			SELECT YYMM, STUD_ID 
					, PLAN_LRN_EX_CNT
			FROM MONTH_LRN_EX_STT
			WHERE STUD_ID = #{studId} AND YYMM = DATE_FORMAT(DATE_SUB(CONCAT(#{yymm},'01'), INTERVAL 1 MONTH), '%Y%m')
		) AS PREV_LRN ON PREV_LRN.YYMM = DATE_FORMAT(DATE_SUB(CONCAT(#{yymm},'01'), INTERVAL 1 MONTH), '%Y%m')
		LEFT OUTER JOIN (	
			SELECT YYMM, TOP_30_LRN_CNT, GRP_AVG_LRN_CNT
			FROM MONTH_GRP_LRN_EX_STT
			WHERE YYMM = #{yymm} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_LRN ON LRN.YYMM = GRP_LRN.YYMM	
    </select>
    
    <select id="getFnshLrnExSttDetail" parameterType="hashMap" resultType="resultMap">
	    SELECT DT.dt		-- 날짜
    	<choose>
	      	<when test='currConCheck == "m"'>  
			, DATE_SUB(DT.dt, INTERVAL 1 MONTH) AS prevDt		-- 이전날짜 
 			</when>
 			<otherwise>
		 	, DATE_SUB(DT.dt, INTERVAL 7 DAY) AS prevDt			-- 이전날짜 
 		 	</otherwise>
 		 </choose>
			, LRN.PLAN_LRN_EX_CNT AS fnshLrnCnt	-- 완료한 학습 수
			, LRN.NC_PLAN_LRN_EX_CNT AS ncLrnCnt	-- 미완료 학습 수 
			, PREV_LRN.PLAN_LRN_EX_CNT AS prevFnshLrnCnt	-- 이전 완료한 학습 수 
			, PREV_LRN.NC_PLAN_LRN_EX_CNT AS prevNcLrnCnt	-- 이전 미완료 학습 수
			, GRP_LRN.TOP_30_LRN_CNT AS topFnshLrnCnt		-- 상위 완료한 학습 수 
			, GRP_LRN.GRP_AVG_LRN_CNT AS avgFnshLrnCnt	-- 평균 완료한 학습 수  
		FROM 
		(
			SELECT dt + INTERVAL lv-1 DAY AS dt
			FROM (
			    SELECT @ROWNUM:=@ROWNUM+1 AS lv
			            , #{startDt} dt
			FROM information_schema.`COLUMNS` A
			           , (SELECT @ROWNUM:=0) R
			    LIMIT #{limitDtCnt} 
			) a  
		) AS DT 
		LEFT OUTER JOIN (	
			SELECT DT, STUD_ID 					
					, SUM(IF(FNSH_YN = 'Y',1,0)) AS PLAN_LRN_EX_CNT
					, SUM(IF(FNSH_YN = 'N',1,0)) AS NC_PLAN_LRN_EX_CNT
			FROM DAY_LRN_EX_LOG
			WHERE STUD_ID = #{studId} AND DT BETWEEN #{startDt} AND #{endDt}
				AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL
			GROUP BY DT
		) AS LRN ON LRN.dt = DT.dt
		LEFT OUTER JOIN (	
			SELECT DT, STUD_ID 
					, SUM(IF(FNSH_YN = 'Y',1,0)) AS PLAN_LRN_EX_CNT
					, SUM(IF(FNSH_YN = 'N',1,0)) AS NC_PLAN_LRN_EX_CNT
			FROM DAY_LRN_EX_LOG
		<choose>
	      	<when test='currConCheck == "m"'>  
 			WHERE STUD_ID = #{studId} AND DT BETWEEN DATE_SUB(CONCAT(#{yymm},'01'), INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(CONCAT(#{yymm},'01'), INTERVAL 1 MONTH))
			</when>
	 		<otherwise>
 			WHERE STUD_ID = #{studId} AND DT BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND LAST_DAY(DATE_SUB(#{endDt}, INTERVAL 7 DAY))
			</otherwise>
		</choose>
				AND PLAN_DT IS NOT NULL AND PLAN_UPD_YN IS NULL
			GROUP BY DT
 		<choose>
	      	<when test='currConCheck == "m"'>  
	    ) AS PREV_LRN ON PREV_LRN.DT = DATE_SUB(LRN.DT, INTERVAL 1 MONTH)
			</when>
	 		<otherwise>
		) AS PREV_LRN ON PREV_LRN.DT = DATE_SUB(LRN.DT, INTERVAL 7 DAY)
			</otherwise>
		</choose>
		LEFT OUTER JOIN (	
			SELECT DT, TOP_30_LRN_CNT, GRP_AVG_LRN_CNT
			FROM DAY_GRP_LRN_EX_STT
			WHERE DT BETWEEN #{startDt} AND #{endDt} AND GRADE = (SELECT GRADE FROM STUD WHERE STUD_ID = #{studId})
		) AS GRP_LRN ON LRN.DT = GRP_LRN.DT
		ORDER BY DT.dt
    </select>    
    
    <select id="getLrnExSttCompareSub" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getALrnExStt" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    ALRN.A_LRN_EX_CNT,
		    PALRN.A_LRN_EX_CNT AS PREV_A_LRN_EX_CNT,
		    NULL AS TOP_A_LRN_EX_CNT,
		    NULL AS AVG_A_LRN_EX_CNT,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_LRN_EX_STT ALRN ON ALRN.YYMM = #{yyMm} AND ST.STUD_ID = ALRN.STUD_ID
				LEFT OUTER JOIN MONTH_LRN_EX_STT PALRN ON PALRN.YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m') AND ST.STUD_ID = PALRN.STUD_ID
				LEFT OUTER JOIN MONTH_GRP_LRN_EX_STT GL ON GL.YYMM = #{yyMm}) AND ST.GRADE = GL.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_LRN_EX_STT ALRN ON ALRN.DT = #{endDt} AND ST.STUD_ID = ALRN.STUD_ID
				LEFT OUTER JOIN DAY_7_LRN_EX_STT PALRN ON PALRN.DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY) AND ST.STUD_ID = PALRN.STUD_ID
				LEFT OUTER JOIN DAY_7_GRP_LRN_EX_STT GL ON GL.DT = #{endDt} AND ST.GRADE = GL.GRADE
			</otherwise>
		</choose> 
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getALrnExSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    IF(ST.DT = DATE_ADD(ST.PREV_DT, INTERVAL 1 MONTH), ST.PREV_DT, NULL) AS PREV_DT,
		    A.A_LRN_EX_CNT,
		    PREV_A_LRN_EX_CNT,
		    NULL AS TOP_A_LRN_EX_CNT,
		    NULL AS AVG_A_LRN_EX_CNT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay} 
				) DTS  
			) 	 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				COUNT(CTGR) AS A_LRN_EX_CNT
			FROM (
				SELECT
					DT, 
					STUD_ID,
					CTGR
				FROM DAY_LRN_EX_LOG A
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
					AND FNSH_YN = 'Y'
					AND ((PLAN_DT IS NULL AND LRN_SEC <![CDATA[>=]]>  30) OR (PLAN_DT <![CDATA[>]]> 0 AND PLAN_UPD_YN = 'Y'))
			) ACHART1
			GROUP BY DT, STUD_ID
		) A ON ST.STUD_ID = A.STUD_ID AND ST.DT = A.DT
		LEFT OUTER JOIN (
			SELECT
				DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				STUD_ID,
				COUNT(CTGR) AS PREV_A_LRN_EX_CNT
			FROM (
				SELECT
					DT, 
					STUD_ID,
					CTGR
				FROM DAY_LRN_EX_LOG A
				WHERE DT
				<choose>
					<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>
					AND STUD_ID = #{studId}
					AND FNSH_YN = 'Y'
					AND ((PLAN_DT IS NULL AND LRN_SEC <![CDATA[>=]]>  30) OR (PLAN_DT <![CDATA[>]]> 0 AND PLAN_UPD_YN = 'Y'))
			) ACHART1
			GROUP BY DT, STUD_ID
		) PA ON ST.PREV_NUMS = PA.PREV_NUMS1 AND ST.STUD_ID = PA.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_LRN_EX_STT GL ON GL.YYMM = #{yyMm} AND ST.GRADE = GL.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_LRN_EX_STT GL ON GL.DT = #{endDt} AND ST.GRADE = GL.GRADE
			</otherwise>
		</choose> 
		ORDER BY ST.DT
    </select>
    
    <select id="getCrtRtStt" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    IF(ES.QUES_CNT IS NULL, 0, ROUND(ES.CRT_CNT / ES.QUES_CNT * 100)) AS CRT_RT,
    		IF(PES.QUES_CNT IS NULL, 0, ROUND(PES.CRT_CNT / PES.QUES_CNT * 100)) AS PREV_CRT_RT,
		    NULL AS TOP_CRT_RT,
		    NULL AS AVG_CRT_RT,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN EXAM_MONTH_STT ES ON ES.YYMM = #{yyMm} AND ST.STUD_ID = ES.STUD_ID
				LEFT OUTER JOIN EXAM_MONTH_STT PES ON PES.YYMM = DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%Y%m') AND ST.STUD_ID = PES.STUD_ID
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_EXAM_STT ES ON ES.DT = #{endDt} AND ST.STUD_ID = ES.STUD_ID
				LEFT OUTER JOIN DAY_7_EXAM_STT PES ON PES.DT = DATE_SUB(#{endDt}, INTERVAL 7 DAY) AND ST.STUD_ID = PES.STUD_ID
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getCrtRtSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    IF(ST.DT = DATE_ADD(ST.PREV_DT, INTERVAL 1 MONTH), ST.PREV_DT, NULL) AS PREV_DT,
		    ST.STUD_ID,
		    E.CRT_RT,
		    PREV_CRT_RT,
		    NULL AS TOP_CRT_RT,
		    NULL AS AVG_CRT_RT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
		        ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT
			FROM (
				SELECT
					DT,
					STUD_ID,
					SUM(QUES_CNT) AS QUES_CNT,
					SUM(CRT_CNT) AS CRT_CNT
				FROM EXAM_RST
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
					AND DEL_YN = 'N'
				GROUP BY DT, STUD_ID
			) ECHART1
		) E ON ST.DT = E.DT AND ST.STUD_ID = E.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				STUD_ID,
		        ROUND(CRT_CNT / QUES_CNT * 100) AS PREV_CRT_RT
			FROM (
				SELECT
					DT,
					STUD_ID,
					SUM(QUES_CNT) AS QUES_CNT,
					SUM(CRT_CNT) AS CRT_CNT
				FROM EXAM_RST
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>
					AND STUD_ID = #{studId}
					AND DEL_YN = 'N'
				GROUP BY DT, STUD_ID
			) ECHART1
			GROUP BY DT, STUD_ID
		) PE ON ST.PREV_NUMS = PE.PREV_NUMS1 AND ST.STUD_ID = PE.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
    </select>
    
    <select id="getIncrtNoteNcStt" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			ST.STUD_ID,
		    INCRT_NOTE_NC_CNT,
		    PREV_INCRT_NOTE_NC_CNT,
		    NULL AS TOP_INCRT_NOTE_NC_CNT,
		    NULL AS AVG_INCRT_NOTE_NC_CNT,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				CASE
					WHEN SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT) <![CDATA[<]]> 0 THEN 0
					ELSE SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)
				END AS INCRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) EN ON ST.STUD_ID = EN.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				CASE
					WHEN SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT) <![CDATA[<]]> 0 THEN 0
					ELSE SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)
				END AS PREV_INCRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) PEN ON ST.STUD_ID = PEN.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getIncrtNoteNcSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    IF(ST.DT = DATE_ADD(ST.PREV_DT, INTERVAL 1 MONTH), ST.PREV_DT, NULL) AS PREV_DT,
		    INCRT_NOTE_NC_CNT,
		    CRT_NOTE_NC_CNT,
		    PREV_INCRT_NOTE_NC_CNT,
		    PREV_CRT_NOTE_NC_CNT,
		    NULL AS TOP_INCRT_NOTE_NC_CNT,
		    NULL AS AVG_INCRT_NOTE_NC_CNT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				CASE
					WHEN SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT) <![CDATA[<]]> 0 THEN 0
					ELSE SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)
				END AS INCRT_NOTE_NC_CNT,
				SUM(INCRT_NT_FNSH_CNT) AS CRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) A ON ST.STUD_ID = A.STUD_ID AND ST.DT = A.DT
		LEFT OUTER JOIN (
		    SELECT
				DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				STUD_ID,
				CASE
					WHEN SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT) <![CDATA[<]]> 0 THEN 0
					ELSE SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)
				END AS PREV_INCRT_NOTE_NC_CNT,
				SUM(INCRT_NT_FNSH_CNT) AS PREV_CRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) PA ON ST.PREV_NUMS = PA.PREV_NUMS1 AND ST.STUD_ID = PA.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
		ORDER BY ST.DT
    </select>
    
    <select id="getCrtQuesCntStt" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			ST.STUD_ID,
		    CRT_QUES_CNT,
		    PREV_CRT_QUES_CNT,
		    NULL AS TOP_CRT_QUES_CNT,
		    NULL AS AVG_CRT_QUES_CNT,
		    NULL AS SUMMARY,
    		NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(CRT_CNT) AS CRT_QUES_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) EN ON ST.STUD_ID = EN.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(CRT_CNT) AS PREV_CRT_QUES_CNT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) PEN ON ST.STUD_ID = PEN.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getCrtQuesCntSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    IF(ST.DT = DATE_ADD(ST.PREV_DT, INTERVAL 1 MONTH), ST.PREV_DT, NULL) AS PREV_DT,
		    CRT_QUES_CNT,
		    INCRT_QUES_CNT,
		    PREV_CRT_QUES_CNT,
		    PREV_INCRT_QUES_CNT,
		    NULL AS TOP_A_LRN_EX_CNT,
		    NULL AS AVG_A_LRN_EX_CNT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				SUM(CRT_CNT) AS CRT_QUES_CNT,
		        SUM(INCRT_CNT) AS INCRT_QUES_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) A ON ST.STUD_ID = A.STUD_ID AND ST.DT = A.DT
		LEFT OUTER JOIN (
		    SELECT
				DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				STUD_ID,
				SUM(CRT_CNT) AS PREV_CRT_QUES_CNT,
		        SUM(INCRT_CNT) AS PREV_INCRT_QUES_CNT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND DEL_YN = 'N'
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) PA ON ST.PREV_NUMS = PA.PREV_NUMS1 AND ST.STUD_ID = PA.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_EXAM_RST GE ON GE.YYMM = #{yyMm} AND ST.GRADE = GE.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_EXAM_RST GE ON GE.DT = #{endDt} AND ST.GRADE = GE.GRADE
			</otherwise>
		</choose> 
		ORDER BY ST.DT
    </select>
    
    <select id="getSlvHabitStt" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			ST.STUD_ID,
		    SLV_HABIT_CNT,
		    PREV_SLV_HABIT_CNT,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				COUNT(IF(QUES_PTN IN ('GUC', 'GUI', 'SKP', 'CUR', 'MIS'), 1, NULL)) AS SLV_HABIT_CNT
			FROM (
				SELECT
					STUD_ID,
					IFNULL(QUES_PTN_IRT, QUES_PTN) AS QUES_PTN
				FROM EXAM_RST_QUES_LOG
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
			) EQ
			GROUP BY STUD_ID
		) EN ON ST.STUD_ID = EN.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				COUNT(IF(QUES_PTN IN ('GUC', 'GUI', 'SKP', 'CUR', 'MIS'), 1, NULL)) AS PREV_SLV_HABIT_CNT
			FROM (
				SELECT
					STUD_ID,
					IFNULL(QUES_PTN_IRT, QUES_PTN) AS QUES_PTN
				FROM EXAM_RST_QUES_LOG
				WHERE DT
				<choose>
					<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>
					AND STUD_ID = #{studId}
			) EQ
			GROUP BY STUD_ID
		) PEN ON ST.STUD_ID = PEN.STUD_ID
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getSlvHabitSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    IF(ST.DT = DATE_ADD(ST.PREV_DT, INTERVAL 1 MONTH), ST.PREV_DT, NULL) AS PREV_DT,
		    SLV_HABIT_CNT,
		    SKIP_QUES_CNT,
		    CURSORY_QUES_CNT,
		    GUESS_QUES_CNT,
		    MISTAKEN_QUES_CNT,
		    PREV_SKIP_QUES_CNT,
		    PREV_CURSORY_QUES_CNT,
		    PREV_GUESS_QUES_CNT,
		    PREV_MISTAKEN_QUES_CNT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
		        COUNT(IF(QUES_PTN IN ('GUC', 'GUI', 'SKP', 'CUR', 'MIS'), 1, NULL)) AS SLV_HABIT_CNT,
				COUNT(IF(QUES_PTN = 'SKP', 1, NULL)) AS SKIP_QUES_CNT,
				COUNT(IF(QUES_PTN = 'CUR', 1, NULL)) AS CURSORY_QUES_CNT,
				COUNT(IF(QUES_PTN IN ('GUC', 'GUI'), 1, NULL)) AS GUESS_QUES_CNT,
				COUNT(IF(QUES_PTN = 'MIS', 1, NULL)) AS MISTAKEN_QUES_CNT
			FROM (
				SELECT
					DT,
					STUD_ID,
					IFNULL(QUES_PTN_IRT, QUES_PTN) AS QUES_PTN
				FROM EXAM_RST_QUES_LOG
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
			) EQ
			GROUP BY DT, STUD_ID
		) A ON ST.STUD_ID = A.STUD_ID AND ST.DT = A.DT
		LEFT OUTER JOIN (
		    SELECT
				DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				STUD_ID,
				COUNT(IF(QUES_PTN = 'SKP', 1, NULL)) AS PREV_SKIP_QUES_CNT,
				COUNT(IF(QUES_PTN = 'CUR', 1, NULL)) AS PREV_CURSORY_QUES_CNT,
				COUNT(IF(QUES_PTN IN ('GUC', 'GUI'), 1, NULL)) AS PREV_GUESS_QUES_CNT,
				COUNT(IF(QUES_PTN = 'MIS', 1, NULL)) AS PREV_MISTAKEN_QUES_CNT
			FROM (
				SELECT
					DT,
					STUD_ID,
					IFNULL(QUES_PTN_IRT, QUES_PTN) AS QUES_PTN
				FROM EXAM_RST_QUES_LOG
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>
					AND STUD_ID = #{studId}
			) EQ
			GROUP BY DT, STUD_ID
		) PA ON ST.PREV_NUMS = PA.PREV_NUMS1 AND ST.STUD_ID = PA.STUD_ID
		ORDER BY ST.DT
    </select>
    
    <select id="getDayAvgLrnStt" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			ST.STUD_ID,
		    LRN_TM,
		    PREV_LRN_TM,
			NULL AS SUMMARY,
			NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(IFNULL(LRN_SEC,0)) AS LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) LT ON ST.STUD_ID = LT.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(IFNULL(LRN_SEC,0)) AS PREV_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) PLT ON ST.STUD_ID = PLT.STUD_ID
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getDayAvgLrnSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    ST.DT,
		    TM.SUBJ_CD,
		    TM.LRN_SEC AS LRN_TM
		FROM (
			SELECT 
				ST1.STUD_ID,
				DE.DT
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT #{lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS LRN_SEC
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID, SUBJ_CD
		) TM ON TM.DT = ST.DT AND ST.STUD_ID = TM.STUD_ID
    </select>
    
    <select id="getDayAvgLrnDetailList" parameterType="hashMap" resultType="resultMap">
    	SELECT
		    ST.DT,
		    SUM(IFNULL(TM.LRN_SEC, 0 )) AS TOTAL_LRN_SEC,
		    GROUP_CONCAT(IFNULL(TM.LRN_SEC,0) ORDER BY ST.SUBJ_CD SEPARATOR ',') AS SUBJ_LRN_TM
		FROM (
			SELECT 
				ST1.STUD_ID,
				DE.DT,
				CD.SUBJ_CD
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			CROSS JOIN COMM_SUBJ_CD CD 
			WHERE ST1.STUD_ID = #{studId}
				AND CD.DEPTH = 1 
				AND CD.SUBJ_CD NOT LIKE 'Z%'
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS LRN_SEC
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID, SUBJ_CD
		) TM ON TM.DT = ST.DT AND TM.SUBJ_CD = ST.SUBJ_CD AND ST.STUD_ID = TM.STUD_ID
		GROUP BY ST.DT, ST.STUD_ID
    </select>
    
    <select id="getTotalLrnTmStt" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    TOTAL_LRN_TM,
		    PREV_TOTAL_LRN_TM,
		    NULL AS TOP_TOTAL_LRN_TM,
		    NULL AS AVG_TOTAL_LRN_TM,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(IFNULL(LRN_SEC,0)) AS TOTAL_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) TM ON ST.STUD_ID = TM.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(IFNULL(LRN_SEC,0)) AS PREV_TOTAL_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		) PTM ON ST.STUD_ID = PTM.STUD_ID
		<choose>
			<when test='currConCheck == "m"'>
				LEFT OUTER JOIN MONTH_GRP_LRN_EX_STT GL ON GL.YYMM = #{yyMm} AND ST.GRADE = GL.GRADE
			</when>
			<otherwise>
				LEFT OUTER JOIN DAY_7_GRP_LRN_EX_STT GL ON GL.DT = #{endDt} AND ST.GRADE = GL.GRADE
			</otherwise>
		</choose> 
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getTotalLrnTmSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.DT,
		    TOTAL_LRN_TM,
		    PREV_TOTAL_LRN_TM,
		    NULL AS TOP_A_LRN_EX_CNT,
		    NULL AS AVG_A_LRN_EX_CNT
		FROM (
			SELECT 
				ST1.STUD_ID,
		        ST1.GRADE,
				DE.DT,
		        DATE_SUB(DT, INTERVAL 1 MONTH) AS PREV_DT,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			WHERE ST1.STUD_ID = #{studId}
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				SUM(IFNULL(LRN_SEC,0)) AS TOTAL_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) A ON ST.STUD_ID = A.STUD_ID AND ST.DT = A.DT
		LEFT OUTER JOIN (
		    SELECT
				DT,
		        STUD_ID,
		        CAST(DATE_FORMAT(DT, '%d') AS UNSIGNED) AS PREV_NUMS1,
				SUM(IFNULL(LRN_SEC,0)) AS PREV_TOTAL_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID
		) PA ON ST.PREV_NUMS = PA.PREV_NUMS1 AND ST.STUD_ID = PA.STUD_ID
		LEFT OUTER JOIN DAY_7_GRP_LRN_EX_STT GL ON ST.DT = GL.DT AND ST.GRADE = GL.GRADE
		ORDER BY ST.DT
    </select>
    
    <select id="getLongLrnTmStt" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    LONG_LRN_SUBJ_CD,
		    LONG_LRN_SUBJ_LRN_TM,
		    PREV_LONG_LRN_SUBJ_LRN_TM,
		    NULL AS SUMMARY,
		    NULL AS DETAIL
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD AS LONG_LRN_SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS LONG_LRN_SUBJ_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
			ORDER BY SUM(IFNULL(LRN_SEC,0)) DESC 
			LIMIT 1
		) TM ON ST.STUD_ID = TM.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
		        SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS PREV_LONG_LRN_SUBJ_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
		) PTM ON ST.STUD_ID = PTM.STUD_ID AND TM.LONG_LRN_SUBJ_CD = PTM.SUBJ_CD
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getLongLrnTmSttList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    ST.SUBJ_CD,
		    LRN_TM,
		    PREV_LRN_TM
		FROM (
			SELECT 
				ST1.STUD_ID,
				CD.SUBJ_CD
			FROM STUD ST1
			CROSS JOIN COMM_SUBJ_CD CD 
			WHERE ST1.STUD_ID = #{studId}
				AND CD.DEPTH = 1 
				AND CD.SUBJ_CD NOT LIKE 'Z%'
		) ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
		) TM ON ST.STUD_ID = TM.STUD_ID AND TM.SUBJ_CD = ST.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
		        SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS PREV_LRN_TM
			FROM DAY_LRN_EX_LOG
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
				BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
		) PTM ON ST.STUD_ID = PTM.STUD_ID AND ST.SUBJ_CD = PTM.SUBJ_CD
    </select>
    
    <select id="getLongLrnTmDetailList" parameterType="hashMap" resultType="resultMap">
    	SELECT
		    ST.DT,
		    SUM(IFNULL(TM.LRN_SEC, 0 )) AS TOTAL_LRN_SEC,
		    GROUP_CONCAT(IFNULL(TM.LRN_SEC,0) ORDER BY ST.SUBJ_CD SEPARATOR ',') AS SUBJ_LRN_TM
		FROM (
			SELECT 
				ST1.STUD_ID,
				DE.DT,
				CD.SUBJ_CD
			FROM STUD ST1
			CROSS JOIN (
				SELECT 
					DT + INTERVAL LV - 1 DAY AS DT
				FROM (
					SELECT 
						@ROWNUM:=@ROWNUM+1 AS LV, 
						#{startDt} AS DT
					FROM information_schema.`COLUMNS` A
						   , (SELECT @ROWNUM:=0) R
					LIMIT ${lastDay}    
				) DTS  
			) DE 
			CROSS JOIN COMM_SUBJ_CD CD 
			WHERE ST1.STUD_ID = #{studId}
				AND CD.DEPTH = 1 
				AND CD.SUBJ_CD NOT LIKE 'Z%'
		) ST
		LEFT OUTER JOIN (
			SELECT
				DT,
				STUD_ID,
				SUBJ_CD,
				SUM(IFNULL(LRN_SEC,0)) AS LRN_SEC
			FROM DAY_LRN_EX_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY DT, STUD_ID, SUBJ_CD
		) TM ON TM.DT = ST.DT AND TM.SUBJ_CD = ST.SUBJ_CD AND ST.STUD_ID = TM.STUD_ID
		GROUP BY ST.DT, ST.STUD_ID
    </select>
    
    <select id="getSubjExam" parameterType="hashMap" resultType="resultMap">
    	SELECT
		    SUBJ_CD,
		    ANS_QUES_CNT,
		    CRT_QUES_CNT,
		    INCRT_NOTE_CNT,
		    INCRT_NOTE_FNSH_CNT
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUM(QUES_CNT) AS ANS_QUES_CNT,
				SUM(CRT_CNT) AS CRT_QUES_CNT,
				SUM(INCRT_NT_REG_CNT) AS INCRT_NOTE_CNT,
				SUM(INCRT_NT_FNSH_CNT) AS INCRT_NOTE_FNSH_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
		) CRT ON ST.STUD_ID = CRT.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS CRT_RT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
			ORDER BY CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END DESC
			LIMIT 1		
		) SUBJ ON ST.STUD_ID = SUBJ.STUD_ID
		WHERE ST.STUD_ID = #{studId};
    </select>
    
    <select id="getCompareSub" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ST.STUD_ID,
		    MAX_SUBJ_CD,
		    MAX_CRT_RT,
		    PRE_MAX_CRT_RT,
		    MAX_SUB_CRT_RT,
		    MIN_SUBJ_CD,
		    MIN_CRT_RT,
		    PRE_MIN_CRT_RT,
		    MIN_SUB_CRT_RT,
		    <choose>
		    	<when test='currConCheck == "m"'>
		    		CONCAT(CAST(#{mm} AS UNSIGNED), '월') AS DT,
		    	</when>
		    	<when test='currConCheck == "w"'>
		    		(SELECT CONCAT(CAST(SUBSTRING(YYMM, 5) AS UNSIGNED), '월 ', WK, '주차') FROM COMM_WK_DT WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) = #{endDt}) AS DT,
		    	</when>
		    	<otherwise>
		    		CONCAT(#{startDt}, ' ~ ', #{endDt}) AS DT,
		    	</otherwise>
		    </choose>
		    <choose>
		    	<when test='currConCheck == "m"'>
		    		CONCAT(CAST(DATE_FORMAT(DATE_SUB(#{startDt}, INTERVAL 1 MONTH), '%m') AS UNSIGNED), '월') AS PRE_DT
		    	</when>
		    	<when test='currConCheck == "w"'>
		    		(SELECT CONCAT(CAST(SUBSTRING(YYMM, 5) AS UNSIGNED), '월 ', WK, '주차') FROM COMM_WK_DT WHERE IFNULL(SU, IFNULL(SA, IFNULL(FR, IFNULL(TH, IFNULL(WE, IFNULL(TU, MO)))))) = DATE_SUB(#{endDt}, INTERVAL 7 DAY)) AS PRE_DT
		    	</when>
		    	<otherwise>
		    		CONCAT(DATE_SUB(#{startDt}, INTERVAL 7 DAY), ' ~ ', DATE_SUB(#{endDt}, INTERVAL 7 DAY)) AS PRE_DT
		    	</otherwise>
		    </choose>
		FROM STUD ST 
		LEFT OUTER JOIN (
			SELECT
				SCRT.STUD_ID,
				SCRT.SUBJ_CD AS MAX_SUBJ_CD,
				SCRT.QUES_CNT,
				SCRT.CRT_RT AS MAX_CRT_RT,
				PSCRT.CRT_RT AS PRE_MAX_CRT_RT,
				(SCRT.CRT_RT - PSCRT.CRT_RT) AS MAX_SUB_CRT_RT
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(QUES_CNT) AS QUES_CNT,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) SCRT 
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT 
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>  
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) PSCRT ON SCRT.STUD_ID = PSCRT.STUD_ID AND SCRT.SUBJ_CD = PSCRT.SUBJ_CD
			WHERE SCRT.CRT_RT <![CDATA[>]]> 60
			ORDER BY SCRT.CRT_RT DESC, SCRT.QUES_CNT DESC, (SCRT.CRT_RT - PSCRT.CRT_RT) DESC, SCRT.SUBJ_CD
			LIMIT 1
		) MAXS ON ST.STUD_ID = MAXS.STUD_ID
		LEFT OUTER JOIN (
			SELECT
				SCRT.STUD_ID,
				SCRT.SUBJ_CD AS MIN_SUBJ_CD,
				SCRT.QUES_CNT,
				SCRT.CRT_RT AS MIN_CRT_RT,
				PSCRT.CRT_RT AS PRE_MIN_CRT_RT,
				(PSCRT.CRT_RT - SCRT.CRT_RT) AS MIN_SUB_CRT_RT
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(QUES_CNT) AS QUES_CNT,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) SCRT 
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					CASE
						WHEN SUM(QUES_CNT) = 0 THEN 0
						ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
					END AS CRT_RT
				FROM EXAM_RST
				WHERE DT
				<choose>
					<when test='currConCheck == "m"'>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
					</when>
					<otherwise>
						BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
					</otherwise>
				</choose>  
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
			) PSCRT ON SCRT.STUD_ID = PSCRT.STUD_ID AND SCRT.SUBJ_CD = PSCRT.SUBJ_CD
			WHERE SCRT.CRT_RT <![CDATA[<=]]> 60
			ORDER BY SCRT.CRT_RT, SCRT.QUES_CNT DESC, (PSCRT.CRT_RT - SCRT.CRT_RT) DESC, SCRT.SUBJ_CD
			LIMIT 1
		) MINS ON ST.STUD_ID = MINS.STUD_ID
		WHERE ST.STUD_ID = #{studId}
    </select>
    
    <select id="getExamChart" parameterType="hashMap" resultType="resultMap">
		SELECT
		    ST.SUBJ_CD,
		    CRT_RT,
		    PREV_CRT_RT,
		    TOP_CRT_RT,
		    AVG_CRT_RT,
		    EXPL_CNT,
		    ANS_QUES_CNT,
		    CRT_QUES_CNT,
		    INCRT_NOTE_NC_CNT,
		    IMPRV_SLV_HABIT_CNT,
		    SKIP_QUES_CNT,
		    CURSORY_QUES_CNT,
		    GUESS_QUES_CNT,
		    MISTAKE_QUES_CNT
		FROM (
			SELECT
				STUD_ID,
		        GRADE,
		        SUBJ_CD
			FROM STUD ST
		    CROSS JOIN COMM_SUBJ_CD CS
			WHERE ST.STUD_ID = #{studId}  
				AND CS.SUBJ_CD LIKE 'C%' 
				AND CS.DEPTH = 1
		) ST
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
		        COUNT(STUD_ID) AS EXPL_CNT,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS CRT_RT,
				SUM(QUES_CNT) AS ANS_QUES_CNT,
				SUM(CRT_CNT) AS CRT_QUES_CNT,
				IF(IFNULL(SUM(INCRT_NT_REG_CNT),0) = 0, 0, (SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT))) AS INCRT_NOTE_NC_CNT
			FROM EXAM_RST
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
		        AND DEL_YN = 'N'
			GROUP BY STUD_ID, SUBJ_CD
		) ER ON ST.STUD_ID = ER.STUD_ID AND ST.SUBJ_CD = ER.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) IN ('GUC', 'GUI', 'SKP', 'CUR', 'MIS'), 1, NULL)) AS IMPRV_SLV_HABIT_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'SKP', 1, NULL)) AS SKIP_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'CUR', 1, NULL)) AS CURSORY_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) IN ('GUC', 'GUI'), 1, NULL)) AS GUESS_QUES_CNT,
				COUNT(IF(IFNULL(QUES_PTN_IRT, QUES_PTN) = 'MIS', 1, NULL)) AS MISTAKE_QUES_CNT
			FROM EXAM_RST_QUES_LOG
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD
		) EQ ON ST.STUD_ID = EQ.STUD_ID AND ST.SUBJ_CD = EQ.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				STUD_ID,
				SUBJ_CD,
				CASE
					WHEN SUM(QUES_CNT) = 0 THEN 0
					ELSE ROUND(SUM(CRT_CNT) / SUM(QUES_CNT) * 100)
				END AS PREV_CRT_RT
			FROM EXAM_RST
			WHERE DT 
			<choose>
				<when test='currConCheck == "m"'>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 1 MONTH) AND LAST_DAY(DATE_SUB(#{startDt}, INTERVAL 1 MONTH))
				</when>
				<otherwise>
					BETWEEN DATE_SUB(#{startDt}, INTERVAL 7 DAY) AND DATE_SUB(#{endDt}, INTERVAL 7 DAY)
				</otherwise>
			</choose>  
				AND STUD_ID = #{studId}
		        AND DEL_YN = 'N'
			GROUP BY STUD_ID, SUBJ_CD
		) PER ON ST.STUD_ID = PER.STUD_ID AND ST.SUBJ_CD = PER.SUBJ_CD
		LEFT OUTER JOIN (
			SELECT
				GRADE,
		        SUBJ_CD,
		        NULL AS TOP_CRT_RT,
		        GRP_AVG_CRT_RT AS AVG_CRT_RT
			<choose>
				<when test='currConCheck == "m"'>
					FROM MONTH_GRP_EXAM_SUBJ_RST
					WHERE YYMM = #{yyMm}
				</when>
				<otherwise>
					FROM DAY_7_GRP_EXAM_SUBJ_RST
		    		WHERE DT = #{endDt}
				</otherwise>
			</choose>  
		) GP ON ST.GRADE = GP.GRADE AND ST.SUBJ_CD = GP.SUBJ_CD  
    </select>
    
    <select id="getExamCdList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			CD AS VALUE,
			CD_NM AS NAME
		FROM COMM_CD
		WHERE GRP = 'EXAM';
    </select>
    
    <select id="getQuesCdList" parameterType="hashMap" resultType="resultMap">
		SELECT
			CASE CD
				WHEN 'CRT' THEN 'crtQues'
				WHEN 'GUC' THEN 'guessQues'
				WHEN 'SKP' THEN 'skipQues'
				WHEN 'GUI' THEN 'guessIncQues'
				WHEN 'CUR' THEN 'cursoryQues'
				WHEN 'INC' THEN 'incrtQues'
				WHEN 'MIS' THEN 'mistakenQues'
			END AS VALUE,
			CASE CD
				WHEN 'GUC' THEN '찍은것으로 보이는 문제(정답)'
				WHEN 'GUI' THEN '찍은것으로 보이는 문제(오답)'
				ELSE CD_NM
			END AS NAME
		FROM COMM_CD
		WHERE GRP = 'QUES_PTN';
    </select>
    
    <select id="getSubjExamListCnt" parameterType="hashMap" resultType="resultMap">
		SELECT
				COUNT(CNT.STUD_ID) AS TOTAL_CNT
		FROM STUD ST
		LEFT OUTER JOIN (
			SELECT
				ER.STUD_ID
			FROM EXAM_RST ER
			LEFT OUTER JOIN EXAM_RST_QUES_LOG EQ ON ER.DT = EQ.DT AND ER.STUD_ID = EQ.STUD_ID AND ER.EXAM_CD = EQ.EXAM_CD AND ER.EXAM_TYPE = EQ.EXAM_TYPE AND ER.SMT_ID = EQ.SMT_ID
			WHERE ER.DT BETWEEN #{startDt} AND #{endDt}
				AND ER.STUD_ID = #{studId}
			<if test="types != null">
					AND ER.EXAM_TYPE IN
				<foreach collection="types" item="item" index="index" separator="," open="(" close=")">
					#{item}
				</foreach>
					AND ER.DEL_YN = 'N'
			</if>
			<choose>
				<when test="search != null">	
					AND ER.EXAM_NM LIKE CONCAT('%',#{search},'%')
				</when>
			</choose>
			GROUP BY ER.STUD_ID, ER.EXAM_CD, ER.SMT_ID
		) CNT ON ST.STUD_ID = CNT.STUD_ID
		WHERE ST.STUD_ID = #{studId}
		GROUP BY ST.STUD_ID 
    </select>
    
    <select id="getSubjExamList" parameterType="hashMap" resultType="resultMap">
    	SELECT
			ER.SUBJ_CD,
		    DATE_FORMAT(ER.SMT_DTTM,'%Y-%m-%d %H:%i:%s') AS SMT_DTTM,
		    ER.EXAM_TYPE AS TYPE,
		    ER.EXAM_CD,
		    ER.SMT_ID,
		    ER.STUD_ID,
		    ER.EXAM_NM,
		    CONCAT((SELECT IF(COUNT(*) = 1, 1, COUNT(*) + 1) FROM EXAM_RST WHERE STUD_ID = ER.STUD_ID AND EXAM_CD = ER.EXAM_CD AND SMT_ID = ER.SMT_ID),'차') AS ROUND,
		    ROUND(ER.CRT_CNT / ER.QUES_CNT * 100) AS CRT_RT,
		    ER.CRT_CNT AS CRT_QUES_CNT,
		    ER.QUES_CNT AS QUES_CNT,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'CRT', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS CRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'GUC', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS GUESS_CRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'SKP', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS SKIP_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'GUI', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS GUESS_INC_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'CUR', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS CURSORY_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'INC', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS INCRT_QUES,
		    GROUP_CONCAT(IF(IFNULL(EQ.QUES_PTN_IRT, EQ.QUES_PTN) = 'MIS', EQ.QUES_ORD, NULL) ORDER BY EQ.QUES_ORD SEPARATOR ',') AS MISTAKEN_QUES
		FROM EXAM_RST ER
		LEFT OUTER JOIN EXAM_RST_QUES_LOG EQ ON ER.DT = EQ.DT AND ER.STUD_ID = EQ.STUD_ID AND ER.EXAM_CD = EQ.EXAM_CD AND ER.EXAM_TYPE = EQ.EXAM_TYPE AND ER.SMT_ID = EQ.SMT_ID
		WHERE ER.DT BETWEEN #{startDt} AND #{endDt}
			AND ER.STUD_ID = #{studId}
		<if test="types != null">
				AND ER.EXAM_TYPE IN
			<foreach collection="types" item="item" index="index" separator="," open="(" close=")">
				#{item}
			</foreach>
				AND ER.DEL_YN = 'N'
		</if>
		<choose>
			<when test="search != null">	
				AND ER.EXAM_NM LIKE CONCAT('%',#{search},'%')
			</when>
		</choose>
		GROUP BY ER.STUD_ID, ER.EXAM_CD, ER.SMT_ID
		ORDER BY ER.SMT_DTTM DESC
		<choose>
            <when test="startIdx != null and pageSize != null">
                LIMIT ${pageSize}
                OFFSET ${startIdx}
            </when>
            <when test="startIdx == null and pageSize != null">
                LIMIT ${pageSize}
                OFFSET 0
            </when>
            <when test="startIdx != null and pageSize == null">
                LIMIT 10
                OFFSET ${startIdx}
            </when>
            <otherwise>
                LIMIT 10
                OFFSET 0
            </otherwise>
        </choose>
    </select>
    
    <select id="getIncrtNote" parameterType="hashMap" resultType="resultMap">
    	SELECT
			SUM(INCRT_NT_REG_CNT) AS INCRT_NOTE_CNT,
		    SUM(INCRT_NT_FNSH_CNT) AS INCRT_NOTE_FNSH_CNT,
		    (SUM(INCRT_NT_REG_CNT) - SUM(INCRT_NT_FNSH_CNT)) AS INCRT_NOTE_NC_CNT,
		    TOTAL_CNT
		FROM EXAM_RST ER
		LEFT OUTER JOIN (
			SELECT 
				STUD_ID,
				COUNT(*) AS TOTAL_CNT
			FROM (
				SELECT
					STUD_ID,
					GRADE_TERM,
					SUBJ_NM,
					CHPATER_NM AS UNIT_NM,
					NULL AS TYPE,
					GROUP_CONCAT(EXAM_CD SEPARATOR ',') AS EXAM_CD,
					GROUP_CONCAT(SMT_ID SEPARATOR ',') AS SMT_ID,
					STU_ID,
					(SELECT CD_NM FROM COMM_CD WHERE GRP = 'LRN_INFO' AND CD = MAX(LRN_STT)) AS LRN_STT,
					SUM(QUES_CNT) AS QUES_CNT,
					SUM(CRT_QUES_CNT) AS CRT_QUES_CNT,
					SUM(REMAIN_QUES_CNT) AS REMAIN_QUES_CNT,
					MAX(INCRT_NOTE_REG_DT) AS INCRT_NOTE_REG_DT,
					MAX(SMT_DTTM) AS SMT_DTTM,
			        CHAPTER_CD
				FROM (
					SELECT 
						EXAM_CD AS CHAPTER_EXAM_CD,
						MIN(L_CHAPTER_CD) AS CHAPTER_CD,
						MIN(L_CHAPTER_NM) AS CHPATER_NM
					FROM UNIT_EXAM_INFO
					GROUP BY EXAM_CD
				) UI 
				JOIN (
					SELECT
						STUD_ID,
						GRADE_TERM,
						(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = EN.SUBJ_CD AND DEPTH = 1) AS SUBJ_NM,
						UNIT_NM,
						EXAM_TYPE AS TYPE,
						EXAM_CD,
						SMT_ID,
						STU_ID,
						LRN_STT,
						QUES_CNT,
						CRT_QUES_CNT,
						INCRT_CNT AS REMAIN_QUES_CNT,
						REG_DT AS INCRT_NOTE_REG_DT,
						SMT_DTTM
					FROM EXAM_RST_INCRT_NT EN
					WHERE DT BETWEEN #{startDt} AND #{endDt}
						AND STUD_ID = #{studId} 
				) EN ON UI.CHAPTER_EXAM_CD = EN.EXAM_CD
				GROUP BY UI.CHAPTER_CD
				<if test='reportType !=null and reportType == "B"'>
				UNION ALL
				SELECT
					STUD_ID,
					GRADE_TERM,
					(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = EN.SUBJ_CD AND DEPTH = 1) AS SUBJ_NM,
					UNIT_NM,
					EXAM_TYPE AS TYPE,
					EXAM_CD,
					SMT_ID,
					STU_ID,
					(SELECT CD_NM FROM COMM_CD WHERE GRP = 'LRN_INFO' AND CD = EN.LRN_STT) AS LRN_STT,
					QUES_CNT,
					CRT_QUES_CNT,
					INCRT_CNT AS REMAIN_QUES_CNT,
					REG_DT AS INCRT_NOTE_REG_DT,
					SMT_DTTM,
			        CONCAT((SELECT L_CHAPTER_CD FROM UNIT_EXAM_INFO WHERE EXAM_CD = EN.EXAM_CD LIMIT 1), 'A') AS CHAPTER_CD
				FROM EXAM_RST_INCRT_NT EN
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId}
				</if>
			) TEN
		) ECNT ON ER.STUD_ID = ECNT.STUD_ID
		WHERE ER.DT BETWEEN #{startDt} AND #{endDt}
			AND ER.STUD_ID = #{studId}
    </select>
    	
    <select id="getIncrtNoteList" parameterType="hashMap" resultType="resultMap">
    	SELECT 
			GRADE_TERM,
			SUBJ_NM,
			UNIT_NM,
			TYPE,
			EXAM_CD,
			SMT_ID,
			STU_ID,
			LRN_STT,
			QUES_CNT,
			CRT_QUES_CNT,
			REMAIN_QUES_CNT,
			INCRT_NOTE_REG_DT,
			SMT_DTTM
		FROM (
			SELECT
				GRADE_TERM,
				SUBJ_NM,
				CHPATER_NM AS UNIT_NM,
				NULL AS TYPE,
				GROUP_CONCAT(EXAM_CD SEPARATOR ',') AS EXAM_CD,
				GROUP_CONCAT(SMT_ID SEPARATOR ',') AS SMT_ID,
				STU_ID,
				(SELECT CD_NM FROM COMM_CD WHERE GRP = 'LRN_INFO' AND CD = MAX(LRN_STT)) AS LRN_STT,
				SUM(QUES_CNT) AS QUES_CNT,
				SUM(CRT_QUES_CNT) AS CRT_QUES_CNT,
				SUM(REMAIN_QUES_CNT) AS REMAIN_QUES_CNT,
				MAX(INCRT_NOTE_REG_DT) AS INCRT_NOTE_REG_DT,
				MAX(SMT_DTTM) AS SMT_DTTM,
		        CHAPTER_CD
			FROM (
				SELECT 
					EXAM_CD AS CHAPTER_EXAM_CD,
					MIN(L_CHAPTER_CD) AS CHAPTER_CD,
					MIN(L_CHAPTER_NM) AS CHPATER_NM
				FROM UNIT_EXAM_INFO
				GROUP BY EXAM_CD
			) UI 
			JOIN (
				SELECT
					GRADE_TERM,
					(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = EN.SUBJ_CD AND DEPTH = 1) AS SUBJ_NM,
					UNIT_NM,
					EXAM_TYPE AS TYPE,
					EXAM_CD,
					SMT_ID,
					STU_ID,
					LRN_STT,
					QUES_CNT,
					CRT_QUES_CNT,
					INCRT_CNT AS REMAIN_QUES_CNT,
					REG_DT AS INCRT_NOTE_REG_DT,
					SMT_DTTM
				FROM EXAM_RST_INCRT_NT EN
				WHERE DT BETWEEN #{startDt} AND #{endDt}
					AND STUD_ID = #{studId} 
			) EN ON UI.CHAPTER_EXAM_CD = EN.EXAM_CD
			GROUP BY UI.CHAPTER_CD
			<if test='reportType !=null and reportType == "B"'>
			UNION ALL
			SELECT
				GRADE_TERM,
				(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = EN.SUBJ_CD AND DEPTH = 1) AS SUBJ_NM,
				UNIT_NM,
				EXAM_TYPE AS TYPE,
				EXAM_CD,
				SMT_ID,
				STU_ID,
				(SELECT CD_NM FROM COMM_CD WHERE GRP = 'LRN_INFO' AND CD = EN.LRN_STT) AS LRN_STT,
				QUES_CNT,
				CRT_QUES_CNT,
				INCRT_CNT AS REMAIN_QUES_CNT,
				REG_DT AS INCRT_NOTE_REG_DT,
				SMT_DTTM,
		        CONCAT((SELECT L_CHAPTER_CD FROM UNIT_EXAM_INFO WHERE EXAM_CD = EN.EXAM_CD LIMIT 1), 'A') AS CHAPTER_CD
			FROM EXAM_RST_INCRT_NT EN
			WHERE DT BETWEEN #{startDt} AND #{endDt}
				AND STUD_ID = #{studId}
			</if>
		) TEN
		ORDER BY CHAPTER_CD, INCRT_NOTE_REG_DT DESC
		<choose>
            <when test="startIdx != null and pageSize != null">
                LIMIT ${pageSize}
                OFFSET ${startIdx}
            </when>
            <when test="startIdx == null and pageSize != null">
                LIMIT ${pageSize}
                OFFSET 0
            </when>
            <when test="startIdx != null and pageSize == null">
                LIMIT 10
                OFFSET ${startIdx}
            </when>
            <otherwise>
                LIMIT 10
                OFFSET 0
            </otherwise>
        </choose>
    </select>
    
    <select id="getChapterStt" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getChapterLrn" parameterType="hashMap" resultType="resultMap">
    </select>
    
    <select id="getCommMsgCd" parameterType="hashMap" resultType="resultMap">
    </select>
    
</mapper>
