<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="HamsTutorVr">
	
	<select id="selectVisionReportPublishedInfo" parameterType="hashMap" resultType="resultMap">
		SELECT
			YYMM,
		    TERM
		FROM (
			SELECT
				PUBLISH_YYMM AS YYMM,
				0 AS TERM
			FROM FIRST_VS_REPORT_STUD
			WHERE STUD_ID = #{studId}
			UNION ALL
			SELECT
				YYMM,
				TERM
			FROM VS_REPORT_STUD
			WHERE STUD_ID = #{studId}
		) INFO
		ORDER BY YYMM DESC, TERM DESC;
    </select>
    
    <select id="selectVisionBasicInfo" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				STUD_ID,
			    GENDER,
			    STUD_NM,
			    LOGIN_ID,
			    SCHL_NM,
			    GRADE
			FROM FIRST_VS_REPORT_STUD
			WHERE STUD_ID = #{studId} 
		</when>
		<otherwise>
			SELECT
				STUD_ID,
			    GENDER,
			    STUD_NM,
			    LOGIN_ID,
			    SCHL_NM,
			    GRADE
			FROM VS_REPORT_STUD
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionBasicMsgInfo" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				CASE
					WHEN COMM_MSG_1 = 'VCM0001' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = COMM_MSG_1) AS CHAR(2000)) 
					ELSE CAST(COMM_MSG_1 AS CHAR(2000)) 
			    END AS FIRST_COMMON_MSG,
			    CASE
					WHEN LRN_EX_MSG LIKE 'VLE00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = LRN_EX_MSG) AS CHAR(2000))
					ELSE CAST(LRN_EX_MSG AS CHAR(2000)) 
			    END AS POSITIVE_LRN_MSG,
			    CASE
					WHEN EXAM_MSG_1 LIKE 'VER00%'  THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_1) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_1 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_MAX_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_2 LIKE 'VER00%'  THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_2) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_2 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_MIN_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_3 LIKE 'VER00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_3) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_3 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_REVIEW_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_4 LIKE 'VER00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_4) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_4 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_INCRT_NT_MSG,
			    CASE
					WHEN LRN_EX_CONTROL_MSG LIKE 'VLC00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = LRN_EX_CONTROL_MSG) AS CHAR(2000))
					ELSE CAST(LRN_EX_CONTROL_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_LRN_MSG,
			    CASE
					WHEN N_LRN_RECOMMAND_MSG LIKE 'VAL00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = N_LRN_RECOMMAND_MSG) AS CHAR(2000))
					ELSE CAST(N_LRN_RECOMMAND_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_SUBJ_RECOMMEND_MSG,
			    CASE
					WHEN SUBJ_REVIEW_MSG LIKE 'VSR00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = SUBJ_REVIEW_MSG) AS CHAR(2000)) 
					ELSE CAST(SUBJ_REVIEW_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_REVIEW_SUBJ_MSG,
			    CASE
					WHEN SUBJ_PREVIEW_MSG LIKE 'VSP00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = SUBJ_PREVIEW_MSG) AS CHAR(2000))
					ELSE CAST(SUBJ_PREVIEW_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_PREVIEW_SUBJ_MSG,
			    CASE
					WHEN COMM_MSG_2 = 'VCM0002' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = COMM_MSG_2) AS CHAR(2000))
					ELSE CAST(COMM_MSG_2 AS CHAR(2000))
			    END AS LAST_COMMON_MSG
			FROM FIRST_VS_REPORT_MSG
			WHERE STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
				CASE
					WHEN COMM_MSG_1 = 'VCM0001' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = COMM_MSG_1) AS CHAR(2000)) 
					ELSE CAST(COMM_MSG_1 AS CHAR(2000)) 
			    END AS FIRST_COMMON_MSG,
			    CASE
					WHEN LRN_EX_MSG LIKE 'VLE00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = LRN_EX_MSG) AS CHAR(2000))
					ELSE CAST(LRN_EX_MSG AS CHAR(2000)) 
			    END AS POSITIVE_LRN_MSG,
			    CASE
					WHEN EXAM_MSG_1 LIKE 'VER00%'  THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_1) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_1 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_MAX_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_2 LIKE 'VER00%'  THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_2) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_2 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_MIN_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_3 LIKE 'VER00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_3) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_3 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_REVIEW_SUBJ_MSG,
			    CASE
					WHEN EXAM_MSG_4 LIKE 'VER00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = EXAM_MSG_4) AS CHAR(2000))
					ELSE CAST(EXAM_MSG_4 AS CHAR(2000)) 
			    END AS POSITIVE_EXAM_INCRT_NT_MSG,
			    CASE
					WHEN LRN_EX_CONTROL_MSG LIKE 'VLC00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = LRN_EX_CONTROL_MSG) AS CHAR(2000))
					ELSE CAST(LRN_EX_CONTROL_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_LRN_MSG,
			    CASE
					WHEN N_LRN_RECOMMAND_MSG LIKE 'VAL00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = N_LRN_RECOMMAND_MSG) AS CHAR(2000))
					ELSE CAST(N_LRN_RECOMMAND_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_SUBJ_RECOMMEND_MSG,
			    CASE
					WHEN SUBJ_REVIEW_MSG LIKE 'VSR00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = SUBJ_REVIEW_MSG) AS CHAR(2000)) 
					ELSE CAST(SUBJ_REVIEW_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_REVIEW_SUBJ_MSG,
			    CASE
					WHEN SUBJ_PREVIEW_MSG LIKE 'VSP00%' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = SUBJ_PREVIEW_MSG) AS CHAR(2000))
					ELSE CAST(SUBJ_PREVIEW_MSG AS CHAR(2000)) 
			    END AS NEGATIVE_PREVIEW_SUBJ_MSG,
			    CASE
					WHEN COMM_MSG_2 = 'VCM0002' THEN CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = COMM_MSG_2) AS CHAR(2000))
					ELSE CAST(COMM_MSG_2 AS CHAR(2000))
			    END AS LAST_COMMON_MSG
			FROM VS_REPORT_MSG
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionBasicMsgCondition" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				STUD_NM,
				MAX_LRN_SUBJ_CD,
				IFNULL(EX_RT,0) AS EX_RT,
				IFNULL(EX_RT,0) AS ATT_RT,
				IFNULL((SELECT IFNULL(SUBJ_NM,'') FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.A_LRN_SUBJ_CD AND DEPTH = 1),'') AS SUBJ_CD,
				IFNULL(MAX_SUBJ_CRT_RT,0) AS MAX_CRT_RT,
				IFNULL(MIN_SUBJ_CRT_RT,0) AS MIN_CRT_RT,
				IFNULL((SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.SP_SUBJ_CD AND DEPTH = 1),'') AS SP_SUBJ_CD,
				IFNULL(SP_UNIT_CNT,0) AS SP_CNT,
				IFNULL((SELECT IFNULL(SUBJ_NM,'') FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.FNSH_SUBJ_CD AND DEPTH = 1),'') AS FNSH_SUBJ_CD
			FROM FIRST_VS_REPORT_MSG_CONDITION MSC
			WHERE STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
				STUD_NM,
				MAX_LRN_SUBJ_CD,
				IFNULL(EX_RT,0) AS EX_RT,
				IFNULL(EX_RT,0) AS ATT_RT,
				IFNULL((SELECT IFNULL(SUBJ_NM,'') FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.A_LRN_SUBJ_CD AND DEPTH = 1),'') AS SUBJ_CD,
				IFNULL(MAX_SUBJ_CRT_RT,0) AS MAX_CRT_RT,
				IFNULL(MIN_SUBJ_CRT_RT,0) AS MIN_CRT_RT,
				IFNULL((SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.SP_SUBJ_CD AND DEPTH = 1),'') AS SP_SUBJ_CD,
				IFNULL(SP_UNIT_CNT,0) AS SP_CNT,
				IFNULL((SELECT IFNULL(SUBJ_NM,'') FROM COMM_SUBJ_CD WHERE SUBJ_CD = MSC.FNSH_SUBJ_CD AND DEPTH = 1),'') AS FNSH_SUBJ_CD
			FROM VS_REPORT_MSG_CONDITION MSC
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionBasicConsultingMsg" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				MSG_CD,
				CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = CM.MSG_CD) AS CHAR(2000)) AS MSG,
				MSG_TYPE
			FROM FIRST_VS_REPORT_CONSULTING_POINT_MSG CM
			WHERE STUD_ID = #{studId}
				AND MSG_USE_YN = 'Y';
		</when>
		<otherwise>
			SELECT
				MSG_CD,
				CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = CM.MSG_CD) AS CHAR(2000)) AS MSG,
				MSG_TYPE
			FROM VS_REPORT_CONSULTING_POINT_MSG CM
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionBasicConsultingMsgCondition" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				ES.EXPL_CNT,
				ES.PS_EXPL_CNT,
				ROUND(ES.CRT_CNT / ES.QUES_CNT * 100) AS CRT_RT,
				(ES.INCRT_NT_REG_CNT - INCRT_NT_FNSH_CNT ) INCRT_NT_CNT,
				IFNULL(ES.SKIP_QUES_CNT,0) AS SKP_QUES_CNT,
				IFNULL(ES.CURSORY_QUES_CNT,0) + IFNULL(ES.MISTAKE_QUES_CNT,0) AS CUR_QUES_CNT,
				IFNULL(ES.GUESS_CRT_QUES_CNT,0) + IFNULL(ES.GUESS_INCRT_QUES_CNT,0) AS GUC_QUES_CNT,
				ROUND(LE.PLAN_LRN_EX_CNT / LE.PLAN_CNT * 100) AS EX_RT,
				(LE.PLAN_CNT - LE.PLAN_LRN_EX_CNT) AS N_LRN_EX_CNT,
				ALRN.A_LRN_EX_CNT,
				(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = ALRN.SUB_SUBJ_CD) AS A_LRN_SUBJ_CD,
				TM.BELOW_5_MIN_LRN_CNT,
				TM.OVER_25_MIN_LRN_CNT
			FROM FIRST_VS_REPORT_STUD ST
			LEFT OUTER JOIN FIRST_VS_REPORT_EXAM_STT ES ON ST.STUD_ID = ES.STUD_ID
			LEFT OUTER JOIN FIRST_VS_REPORT_LRN_EX_STT LE ON ST.STUD_ID = LE.STUD_ID
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUM(BELOW_5_MIN_LRN_CNT) AS BELOW_5_MIN_LRN_CNT,
					SUM(OVER_25_MIN_LRN_CNT) AS OVER_25_MIN_LRN_CNT
				FROM FIRST_VS_REPORT_SUBJ_LRN_TM
				WHERE STUD_ID = #{studId}
			) TM ON ST.STUD_ID = TM.STUD_ID
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUB_SUBJ_CD,
					SUM(A_LRN_EX_CNT) AS A_LRN_EX_CNT
				FROM FIRST_VS_REPORT_SUBJ_A_LRN_EX_STT
				WHERE STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD, SUB_SUBJ_CD
				ORDER BY SUM(A_LRN_EX_CNT) DESC
				LIMIT 1
			) ALRN ON ST.STUD_ID = ALRN.STUD_ID
			WHERE ST.STUD_ID = #{studId};
		</when>
		<otherwise>
			SELECT
				ES.EXPL_CNT,
				ES.PS_EXPL_CNT,
				ROUND(ES.CRT_CNT / ES.QUES_CNT * 100) AS CRT_RT,
				(ES.INCRT_NT_REG_CNT - INCRT_NT_FNSH_CNT ) INCRT_NT_CNT,
				IFNULL(ES.SKIP_QUES_CNT,0) AS SKP_QUES_CNT,
				IFNULL(ES.CURSORY_QUES_CNT,0) + IFNULL(ES.MISTAKE_QUES_CNT,0) AS CUR_QUES_CNT,
				IFNULL(ES.GUESS_CRT_QUES_CNT,0) + IFNULL(ES.GUESS_INCRT_QUES_CNT,0) AS GUC_QUES_CNT,
				ROUND(LE.PLAN_LRN_EX_CNT / LE.PLAN_CNT * 100) AS EX_RT,
				(LE.PLAN_CNT - LE.PLAN_LRN_EX_CNT) AS N_LRN_EX_CNT,
				ALRN.A_LRN_EX_CNT,
				(SELECT SUBJ_NM FROM COMM_SUBJ_CD WHERE SUBJ_CD = ALRN.SUB_SUBJ_CD) AS A_LRN_SUBJ_CD,
				TM.BELOW_5_MIN_LRN_CNT,
				TM.OVER_25_MIN_LRN_CNT
			FROM VS_REPORT_STUD ST
			LEFT OUTER JOIN VS_REPORT_EXAM_STT ES ON ST.YYMM = ES.YYMM AND ST.TERM = ES.TERM AND ST.STUD_ID = ES.STUD_ID
			LEFT OUTER JOIN VS_REPORT_LRN_EX_STT LE ON ST.YYMM = LE.YYMM AND ST.TERM = LE.TERM AND ST.STUD_ID = LE.STUD_ID
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
			        SUM(BELOW_5_MIN_LRN_CNT) AS BELOW_5_MIN_LRN_CNT,
			        SUM(OVER_25_MIN_LRN_CNT) AS OVER_25_MIN_LRN_CNT
				FROM VS_REPORT_SUBJ_LRN_TM
				WHERE YYMM = #{yymm}
					AND TERM = #{term}
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID
			) TM ON ST.STUD_ID = TM.STUD_ID
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUB_SUBJ_CD,
					SUM(A_LRN_EX_CNT) AS A_LRN_EX_CNT
				FROM VS_REPORT_SUBJ_A_LRN_EX_STT
				WHERE YYMM = #{yymm}
					AND TERM = #{term}
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD, SUB_SUBJ_CD
				ORDER BY SUM(A_LRN_EX_CNT) DESC
				LIMIT 1
			) ALRN ON ST.STUD_ID = ALRN.STUD_ID
			WHERE ST.YYMM = #{yymm}
				AND ST.TERM = #{term}
				AND ST.STUD_ID = #{studId};
		</otherwise>
	</choose>
    </select>
    
    <select id="selectRecommendJob" parameterType="hashMap" resultType="resultMap">
		SELECT
			CD_NM
		FROM COMM_CD
		WHERE 	
			CD = #{msgCd}
			AND GRP = #{grp}
		    AND LANG_CD = 'ko'
		    AND CD_TYPE = 'G'
	</select>
	
	<select id="selectVisionGrowthStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				ML.YYMM,
				CASE
					WHEN ML.PLAN_CNT <![CDATA[<]]> ML.PLAN_LRN_EX_CNT THEN 100
					ELSE ROUND(ML.PLAN_LRN_EX_CNT / ML.PLAN_CNT * 100) 
				END AS EX_RT,
				CASE
					WHEN ME.QUES_CNT <![CDATA[<]]> ME.CRT_CNT THEN 100
					ELSE ROUND(ME.CRT_CNT / ME.QUES_CNT * 100)
				END AS CRT_RT,
				MGL.TOP_10_EX_RT AS TOP_10_AVG_EX_RT,
				MGE.TOP_10_CRT_RT AS TOP_10_AVG_CRT_RT,
				MGL.GRP_AVG_EX_RT,
				MGE.GRP_AVG_CRT_RT
			FROM FIRST_VS_REPORT_STUD FS
			LEFT OUTER JOIN MONTH_LRN_EX_STT ML ON ML.YYMM BETWEEN CAST(SUBSTRING(FS.START_YYMMWK,1,6) AS SIGNED) AND FS.PUBLISH_YYMM AND FS.STUD_ID = ML.STUD_ID
			LEFT OUTER JOIN EXAM_MONTH_STT ME ON ML.YYMM = ME.YYMM AND FS.STUD_ID = ME.STUD_ID
			LEFT OUTER JOIN MONTH_GRP_LRN_EX_STT MGL ON ML.YYMM = MGL.YYMM AND FS.GRADE = MGL.GRADE
			LEFT OUTER JOIN MONTH_GRP_EXAM_RST MGE ON ML.YYMM = MGE.YYMM AND FS.GRADE = MGE.GRADE
			WHERE FS.STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
				ML.YYMM,
			    CASE
					WHEN ML.PLAN_CNT <![CDATA[<]]> ML.PLAN_LRN_EX_CNT THEN 100
			        ELSE ROUND(ML.PLAN_LRN_EX_CNT / ML.PLAN_CNT * 100) 
			    END AS EX_RT,
			    CASE
					WHEN ME.QUES_CNT <![CDATA[<]]> ME.CRT_CNT THEN 100
					ELSE ROUND(ME.CRT_CNT / ME.QUES_CNT * 100)
				END AS CRT_RT,
			    MGL.TOP_10_EX_RT AS TOP_10_AVG_EX_RT,
				MGE.TOP_10_CRT_RT AS TOP_10_AVG_CRT_RT,
				MGL.GRP_AVG_EX_RT,
				MGE.GRP_AVG_CRT_RT
			FROM VS_REPORT_STUD VS
			LEFT OUTER JOIN MONTH_LRN_EX_STT ML ON ML.YYMM BETWEEN VS.START_YYMM AND VS.END_YYMM AND VS.STUD_ID = ML.STUD_ID
			LEFT OUTER JOIN EXAM_MONTH_STT ME ON ML.YYMM = ME.YYMM AND VS.STUD_ID = ME.STUD_ID
			LEFT OUTER JOIN MONTH_GRP_LRN_EX_STT MGL ON ML.YYMM = MGL.YYMM AND VS.GRADE = MGL.GRADE
			LEFT OUTER JOIN MONTH_GRP_EXAM_RST MGE ON ML.YYMM = MGE.YYMM AND VS.GRADE = MGE.GRADE
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionGrowthSubjStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				MSR.YYMM,
				SUBJ_CD,
				CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
					ELSE ROUND(CRT_CNT / QUES_CNT * 100)
				END AS CRT_RT
			FROM FIRST_VS_REPORT_STUD FS
			LEFT OUTER JOIN EXAM_MONTH_SUBJ_RST MSR ON MSR.YYMM BETWEEN CAST(SUBSTRING(FS.START_YYMMWK,1,6) AS SIGNED) AND FS.PUBLISH_YYMM AND FS.STUD_ID = MSR.STUD_ID
			WHERE FS.STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
				MSR.YYMM,
				SUBJ_CD,
				CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
					ELSE ROUND(CRT_CNT / QUES_CNT * 100)
				END AS CRT_RT
			FROM VS_REPORT_STUD VS
			LEFT OUTER JOIN EXAM_MONTH_SUBJ_RST MSR ON MSR.YYMM BETWEEN VS.START_YYMM AND VS.END_YYMM AND VS.STUD_ID = MSR.STUD_ID
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionExamStt" parameterType="hashMap" resultType="resultMap">
    	SELECT
			QUES_CNT AS ANS_QUES_CNT,
		    CRT_CNT AS CRT_QUES_CNT,
		    INCRT_NT_REG_CNT AS INCRT_NT_CNT,
		    INCRT_NT_FNSH_CNT AS INCRT_NT_FNSH_CNT
	<choose>
		<when test="term == 0">
			FROM FIRST_VS_REPORT_EXAM_STT
			WHERE 
		</when>
		<otherwise>
			FROM VS_REPORT_EXAM_STT
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
				AND 
		</otherwise>
	</choose>
				STUD_ID = #{studId};
    </select>
    
    <select id="selectVisionExamChapterStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				SUM(LRN_UNIT_CNT) AS LRN_CHAPTER_CNT,
				SUM(FNSH_UNIT_CNT) AS FNSH_CHAPTER_CNT,
				SUM(SP_UNIT_CNT) AS SUPPLEMENTARY_CHAPTER_CNT
			FROM FIRST_VS_REPORT_EXAM_UNIT_TEST_RST
			WHERE STUD_ID = #{studId}
			GROUP BY STUD_ID
		</when>
		<otherwise>
			SELECT
				SUM(LRN_UNIT_CNT) AS LRN_CHAPTER_CNT,
			    SUM(FNSH_UNIT_CNT) AS FNSH_CHAPTER_CNT,
			    SUM(SP_UNIT_CNT) AS SUPPLEMENTARY_CHAPTER_CNT
			FROM VS_REPORT_EXAM_UNIT_TEST_RST
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
			GROUP BY STUD_ID
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionExamChapterSubjList" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				DISTINCT SUBJ_CD
			FROM FIRST_VS_REPORT_STUD FS
			JOIN FIRST_VS_REPORT_EXAM_UNIT_TEST_LOG FEU ON FS.STUD_ID = FEU.STUD_ID AND FEU.SUBJ_CD IN ('C01','C02','C03','C04')
			WHERE FS.STUD_ID = #{studId}
			ORDER BY FEU.SUBJ_CD 
		</when>
		<otherwise>
			SELECT
				DISTINCT SUBJ_CD
			FROM VS_REPORT_STUD VS
			JOIN VS_REPORT_EXAM_UNIT_TEST_LOG VEU ON VS.YYMM = VEU.YYMM AND VS.TERM = VEU.TERM AND VS.STUD_ID = VEU.STUD_ID AND VEU.SUBJ_CD IN ('C01','C02','C03','C04') 
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
			ORDER BY VEU.SUBJ_CD
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionExamChapterNmList" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				DISTINCT
					UI.GRADE,
					UI.TERM,
					SUBSTRING(UI.UNIT_NO,1,1) AS UNIT_NO
			FROM FIRST_VS_REPORT_STUD FS
			JOIN UNIT_INFO UI ON FS.GRADE = UI.GRADE AND IF(CAST(SUBSTRING(FS.PUBLISH_YYMM,5,6) AS SIGNED) <![CDATA[<]]> 8,1,2) = UI.TERM
			WHERE FS.STUD_ID = #{studId}
				AND UI.SUBJ_CD IN 
				<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
	                    #{item}
                </foreach>
			ORDER BY SUBSTRING(UI.UNIT_NO,1,1), UI.SUBJ_CD, UI.EXAM_SUBJ_CD
		</when>
		<otherwise>
			SELECT
				DISTINCT
					UI.GRADE,
			        UI.TERM,
			        SUBSTRING(UI.UNIT_NO,1,1) AS UNIT_NO
			FROM VS_REPORT_STUD VS
			JOIN UNIT_INFO UI ON VS.GRADE = UI.GRADE AND VS.TERM = UI.TERM
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
			    AND UI.SUBJ_CD IN 
				<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
	                    #{item}
                </foreach>
			ORDER BY SUBSTRING(UI.UNIT_NO,1,1), UI.SUBJ_CD, UI.EXAM_SUBJ_CD
		</otherwise>
	</choose>
    </select>
    
     <select id="selectVisionExamChapterList" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				UI_1.UNIT_CD,
				UI_1.SUBJ_CD,
				UI_1.GRADE,
				UI_1.TERM,
				UI_1.UNIT_NO,
				UI_1.UNIT_NM,
				CASE
					WHEN VER.CRT_RT IS NULL THEN 0
			        WHEN VER.CRT_RT <![CDATA[>=]]> 80 THEN 3
			        WHEN VER.CRT_RT BETWEEN 50 AND 79 THEN 2
			        WHEN VER.CRT_RT <![CDATA[<]]> 50 THEN 1
					ELSE 0
				END AS SCORE
			FROM(
				SELECT
					FS.STUD_ID,
					UI.UNIT_CD,
					UI.GRADE,
					UI.TERM,
					UI.SUBJ_CD,
					UI.EXAM_SUBJ_CD,
					UI.UNIT_NM,
					CASE
						WHEN UI.SUBJ_CD = 'C03' AND UI.GRADE <![CDATA[<]]> 5 THEN 
							CASE
								WHEN UI.UNIT_NO LIKE '1단원1중%' THEN 1
				                WHEN UI.UNIT_NO LIKE '1단원2중%' THEN 2
				                WHEN UI.UNIT_NO LIKE '2단원1중%' THEN 3
				                WHEN UI.UNIT_NO LIKE '2단원2중%' THEN 4
				                WHEN UI.UNIT_NO LIKE '3단원1중%' THEN 5
				                WHEN UI.UNIT_NO LIKE '3단원2중%' THEN 6
				            END 
						WHEN UI.SUBJ_CD = 'C03' AND UI.GRADE <![CDATA[>]]> 4 THEN 
							CASE
								WHEN UI.UNIT_NO LIKE '1단원1중%' THEN 1
				                WHEN UI.UNIT_NO LIKE '1단원2중%' THEN 2
				                WHEN UI.UNIT_NO LIKE '1단원3중%' THEN 3
				                WHEN UI.UNIT_NO LIKE '2단원1중%' THEN 4
				                WHEN UI.UNIT_NO LIKE '2단원2중%' THEN 5
				                WHEN UI.UNIT_NO LIKE '2단원3중%' THEN 6
				            END 
				        ELSE SUBSTRING(UI.UNIT_NO,1,1)
			    	END AS UNIT_NO
				FROM FIRST_VS_REPORT_STUD FS
				JOIN UNIT_INFO UI ON FS.GRADE = UI.GRADE AND IF(CAST(SUBSTRING(FS.PUBLISH_YYMM,5,6) AS SIGNED) <![CDATA[<]]> 8,1,2) = UI.TERM
				WHERE FS.STUD_ID = #{studId}
					AND UI.SUBJ_CD IN 
					<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
	                    #{item}
                	</foreach>
				ORDER BY SUBSTRING(UI.UNIT_NO,1,1), UI.SUBJ_CD, UI.EXAM_SUBJ_CD
			) UI_1
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					UNIT_CD,
					MAX(CRT_RT) AS CRT_RT
				FROM (
					SELECT
						STUD_ID,
						UNIT_CD,
						CASE
							WHEN TRUE_SCORE IS NULL THEN ROUND(CRT_CNT / QUES_CNT * 100)
							ELSE ROUND(TRUE_SCORE / TRUE_SCORE_MAX * 100)
						END AS CRT_RT
					FROM FIRST_VS_REPORT_EXAM_UNIT_TEST_LOG
					WHERE STUD_ID = #{studId}
						AND SUBJ_CD IN 
						<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
		                    #{item}
	                	</foreach>
               	) UL
				GROUP BY UL.STUD_ID, UL.UNIT_CD
			) VER ON UI_1.STUD_ID = VER.STUD_ID AND UI_1.UNIT_CD = VER.UNIT_CD
			ORDER BY UI_1.UNIT_NO, UI_1.SUBJ_CD
		</when>
		<otherwise>
			SELECT
				UI_1.UNIT_CD,
				UI_1.SUBJ_CD,
			    UI_1.GRADE,
			    UI_1.TERM,
			    UI_1.UNIT_NO,
			    UI_1.UNIT_NM,
			    CASE
					WHEN VER.CRT_RT IS NULL THEN 0
			        WHEN VER.CRT_RT <![CDATA[>=]]> 80 THEN 3
			        WHEN VER.CRT_RT BETWEEN 50 AND 79 THEN 2
			        WHEN VER.CRT_RT <![CDATA[<]]> 50 THEN 1
			        ELSE 0
			    END AS SCORE
			FROM(
				SELECT
					VS.STUD_ID,
					UI.UNIT_CD,
					UI.GRADE,
					UI.TERM,
					UI.SUBJ_CD,
					UI.EXAM_SUBJ_CD,
					UI.UNIT_NM,
					CASE
						WHEN UI.SUBJ_CD = 'C03' AND UI.GRADE <![CDATA[<]]> 5 THEN 
							CASE
								WHEN UI.UNIT_NO LIKE '1단원1중%' THEN 1
				                WHEN UI.UNIT_NO LIKE '1단원2중%' THEN 2
				                WHEN UI.UNIT_NO LIKE '2단원1중%' THEN 3
				                WHEN UI.UNIT_NO LIKE '2단원2중%' THEN 4
				                WHEN UI.UNIT_NO LIKE '3단원1중%' THEN 5
				                WHEN UI.UNIT_NO LIKE '3단원2중%' THEN 6
				            END 
						WHEN UI.SUBJ_CD = 'C03' AND UI.GRADE <![CDATA[>]]> 4 THEN 
							CASE
								WHEN UI.UNIT_NO LIKE '1단원1중%' THEN 1
				                WHEN UI.UNIT_NO LIKE '1단원2중%' THEN 2
				                WHEN UI.UNIT_NO LIKE '1단원3중%' THEN 3
				                WHEN UI.UNIT_NO LIKE '2단원1중%' THEN 4
				                WHEN UI.UNIT_NO LIKE '2단원2중%' THEN 5
				                WHEN UI.UNIT_NO LIKE '2단원3중%' THEN 6
				            END 
				        ELSE SUBSTRING(UI.UNIT_NO,1,1)
			    	END AS UNIT_NO
				FROM VS_REPORT_STUD VS
				JOIN UNIT_INFO UI ON VS.GRADE = UI.GRADE AND VS.TERM = UI.TERM
				WHERE VS.YYMM = #{yymm}
					AND VS.TERM = #{term}
					AND VS.STUD_ID = #{studId}
					AND UI.SUBJ_CD IN 
					<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
	                    #{item}
                	</foreach>
				ORDER BY SUBSTRING(UI.UNIT_NO,1,1), UI.SUBJ_CD, UI.EXAM_SUBJ_CD
			) UI_1
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					UNIT_CD,
					MAX(CRT_RT) AS CRT_RT
				FROM (
					SELECT
						STUD_ID,
						UNIT_CD,
						CASE
							WHEN TRUE_SCORE IS NULL THEN ROUND(CRT_CNT / QUES_CNT * 100)
							ELSE ROUND(TRUE_SCORE / TRUE_SCORE_MAX * 100)
						END AS CRT_RT
					FROM VS_REPORT_EXAM_UNIT_TEST_LOG
					WHERE YYMM = #{yymm}
						AND TERM = #{term}
						AND STUD_ID = #{studId}
						AND SUBJ_CD IN 
						<foreach collection="subjs" item="item"  open="(" close=")" separator=",">
		                    #{item}
	                	</foreach>
               	) UL
				GROUP BY UL.STUD_ID, UL.UNIT_CD
			) VER ON UI_1.STUD_ID = VER.STUD_ID AND UI_1.UNIT_CD = VER.UNIT_CD
			ORDER BY UI_1.UNIT_NO, UI_1.SUBJ_CD
		</otherwise>
	</choose>
    </select>
	
	<select id="selectVisionExamChapterLrn" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				DATE_FORMAT(DT, '%Y-%m-%d') AS DT,
			    CRT_RT,
			    UNIT_INFO,
			    PRE_UNIT_INFO,
			    IFNULL(PRE_B_CRT_RT, PRE_F_CRT_RT) AS PRE_CRT_RT,
			    DATE_FORMAT(IFNULL(PRE_B_DT, PRE_F_DT), '%Y-%m-%d') AS PRE_DT,
			    REPLACE(SUB_UNIT_INFO,'|',',') AS SUB_UNIT_INFO,
				REPLACE(SP_UNIT_INFO,'|',',') AS SP_UNIT_INFO
			FROM (
				SELECT
					FEU.DT,
					UT.UNIT_CD,
					ROUND(FEU.CRT_CNT / FEU.QUES_CNT * 100) AS CRT_RT,
					UT.UNIT_INFO,
					UT.PRE_UNIT_INFO,
					(SELECT DT AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'B' AND EXAM_CD = UT.UNIT_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_B_DT,
					(SELECT ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'B' AND EXAM_CD = UT.UNIT_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_B_CRT_RT,
					(SELECT DT AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'F' AND EXAM_CD = UT.TP_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_F_DT,
					(SELECT ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'F' AND EXAM_CD = UT.TP_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_F_CRT_RT,
					UT.UNIT_EXAM_CD,
					UT.TP_EXAM_CD,
					UT.SUB_UNIT_INFO,
					UT.SP_UNIT_INFO
				FROM FIRST_VS_REPORT_EXAM_UNIT_TEST_LOG FEU
				JOIN(
					SELECT
						UL.UNIT_CD,
						UL.SUBJ_CD,
						UL.UNIT_INFO,
						UL.PRE_UNIT_INFO,
						UL.PRE_UNIT_CD,
						UI.UNIT_EXAM_CD,
						UI.TP_EXAM_CD,
						UL.SUB_UNIT_INFO,
						UL.SP_UNIT_INFO
					FROM UNIT_LINK_INFO UL
					JOIN UNIT_INFO UI ON UL.PRE_UNIT_CD = UI.UNIT_CD
					WHERE UL.ORD = 1
				) UT ON FEU.UNIT_CD = UT.UNIT_CD
				WHERE FEU.STUD_ID = #{studId}
					AND FEU.UNIT_CD = #{chapterCd}
				LIMIT 1
			) UNIT_INFO
		</when>
		<otherwise>
			SELECT
				DATE_FORMAT(DT, '%Y-%m-%d') AS DT,
			    CRT_RT,
			    UNIT_INFO,
			    PRE_UNIT_INFO,
			    IFNULL(PRE_B_CRT_RT, PRE_F_CRT_RT) AS PRE_CRT_RT,
			    DATE_FORMAT(IFNULL(PRE_B_DT, PRE_F_DT), '%Y-%m-%d') AS PRE_DT,
			    REPLACE(SUB_UNIT_INFO,'|',',') AS SUB_UNIT_INFO,
				REPLACE(SP_UNIT_INFO,'|',',') AS SP_UNIT_INFO
			FROM (
				SELECT
					VEU.DT,
					UT.UNIT_CD,
					ROUND(VEU.CRT_CNT / VEU.QUES_CNT * 100) AS CRT_RT,
					UT.UNIT_INFO,
					UT.PRE_UNIT_INFO,
					(SELECT DT AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'B' AND EXAM_CD = UT.UNIT_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_B_DT,
					(SELECT ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'B' AND EXAM_CD = UT.UNIT_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_B_CRT_RT,
					(SELECT DT AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'F' AND EXAM_CD = UT.TP_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_F_DT,
					(SELECT ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT FROM EXAM_MONTH_UNIT_TEST_RST WHERE STUD_ID = #{studId} AND EXAM_TYPE = 'F' AND EXAM_CD = UT.TP_EXAM_CD ORDER BY DT DESC LIMIT 1) AS PRE_F_CRT_RT,
					UT.UNIT_EXAM_CD,
					UT.TP_EXAM_CD,
					UT.SUB_UNIT_INFO,
					UT.SP_UNIT_INFO
				FROM VS_REPORT_EXAM_UNIT_TEST_LOG VEU
				JOIN(
					SELECT
						UL.UNIT_CD,
						UL.SUBJ_CD,
						UL.UNIT_INFO,
						UL.PRE_UNIT_INFO,
						UL.PRE_UNIT_CD,
						UI.UNIT_EXAM_CD,
						UI.TP_EXAM_CD,
						UL.SUB_UNIT_INFO,
						UL.SP_UNIT_INFO
					FROM UNIT_LINK_INFO UL
					JOIN UNIT_INFO UI ON UL.PRE_UNIT_CD = UI.UNIT_CD
					WHERE UL.ORD = 1
				) UT ON VEU.UNIT_CD = UT.UNIT_CD
				WHERE VEU.YYMM = #{yymm}
					AND VEU.TERM = #{term}
					AND VEU.STUD_ID = #{studId}
					AND VEU.UNIT_CD = #{chapterCd}
				LIMIT 1
			) UNIT_INFO
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionExamPreChapterLrn" parameterType="hashMap" resultType="resultMap">
		SELECT 
			DT,
			ROUND(CRT_CNT / QUES_CNT * 100) AS CRT_RT
		FROM EXAM_MONTH_UNIT_TEST_RST 
		WHERE YYMM > 202010
			AND STUD_ID = #{studId} 
		    AND EXAM_TYPE = 'B' 
		    AND EXAM_CD = 5359
    </select>
    
    <select id="selectVisionExamFieldStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				AFRST.SUBJ_CD,
			    AFRST.ACT_FILED_NM_SP AS ACT_FIELD_NM_SP,
				IF(ACT_CHECK IS NULL, NULL ,AFRST.ACT_FILED_CRT_RT_SP) AS ACT_FIELD_CRT_RT_SP,
				IF(ACT_CHECK IS NULL, NULL ,AFRST.ACT_FILED_STD_CRT_RT_SP) AS ACT_FIELD_STD_CRT_RT_SP,
			    CFRST.CONT_FILED_NM_SP AS CONT_FIELD_NM_SP,
                IF(CONT_CHECK IS NULL, NULL ,CFRST.CONT_FILED_CRT_RT_SP) AS CONT_FIELD_CRT_RT_SP,
				IF(CONT_CHECK IS NULL, NULL ,CFRST.CONT_FILED_STD_CRT_RT_SP) AS CONT_FIELD_STD_CRT_RT_SP
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(CRT_RT) AS ACT_CHECK,
					GROUP_CONCAT(ACT_FIELD ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_NM_SP,
					GROUP_CONCAT(IFNULL(CRT_RT,0) ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_CRT_RT_SP,
					GROUP_CONCAT(IFNULL(STD_CRT_RT,0) ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_STD_CRT_RT_SP
				FROM (
					SELECT
						ST.STUD_ID,
						ST.SUBJ_CD,
						ST.EXAM_FIELD_NM AS ACT_FIELD,
						ROUND(CRT_CNT / QUES_CNT * ROUND(QUES_CNT / MAX_QUES_CNT * 100)) AS CRT_RT,
						ROUND(QUES_CNT / MAX_QUES_CNT * 100) AS STD_CRT_RT
					FROM (
						SELECT
							FS.STUD_ID,
							CF.SUBJ_CD,
							CF.EXAM_FIELD_NM
						FROM FIRST_VS_REPORT_STUD FS
						LEFT OUTER JOIN COMM_EXAM_FIELD CF ON CF.FIELD_TYPE = 'A'
						WHERE FS.STUD_ID = #{studId}
					) ST
					LEFT OUTER JOIN (
						SELECT
							STUD_ID,
							SUBJ_CD,
							FIELD_NM,
							QUES_CNT,
							CRT_CNT,
							(SELECT SUM(QUES_CNT) FROM FIRST_VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST WHERE STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS TOTAL_QUES_CNT,
							(SELECT MAX(QUES_CNT) FROM FIRST_VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST WHERE STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS MAX_QUES_CNT
						FROM FIRST_VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST FS
						WHERE STUD_ID = #{studId}
					) FA ON ST.STUD_ID = FA.STUD_ID AND ST.SUBJ_CD = FA.SUBJ_CD AND ST.EXAM_FIELD_NM = FA.FIELD_NM
				) AF
				GROUP BY STUD_ID, SUBJ_CD 
			) AFRST
			LEFT OUTER JOIN (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(CRT_RT) AS CONT_CHECK,
					GROUP_CONCAT(CONT_FIELD ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_NM_SP,
					GROUP_CONCAT(IFNULL(CRT_RT,0) ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_CRT_RT_SP,
					GROUP_CONCAT(IFNULL(STD_CRT_RT,0) ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_STD_CRT_RT_SP
				FROM (
					SELECT
						ST.STUD_ID,
						ST.SUBJ_CD,
						ST.EXAM_FIELD_NM AS CONT_FIELD,
						ROUND(CRT_CNT / QUES_CNT * ROUND(QUES_CNT / MAX_QUES_CNT * 100)) AS CRT_RT,
						ROUND(QUES_CNT / MAX_QUES_CNT * 100) AS STD_CRT_RT
					FROM (
						SELECT
							FS.STUD_ID,
							CF.SUBJ_CD,
							CF.EXAM_FIELD_NM
						FROM FIRST_VS_REPORT_STUD FS
						LEFT OUTER JOIN COMM_EXAM_FIELD CF ON CF.FIELD_TYPE = 'C'
						WHERE FS.STUD_ID = #{studId}
					) ST
					LEFT OUTER JOIN (
						SELECT
							STUD_ID,
							SUBJ_CD,
							FIELD_NM,
							QUES_CNT,
							CRT_CNT,
							(SELECT SUM(QUES_CNT) FROM FIRST_VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST WHERE STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS TOTAL_QUES_CNT,
							(SELECT MAX(QUES_CNT) FROM FIRST_VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST WHERE STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS MAX_QUES_CNT
						FROM FIRST_VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST FS
						WHERE STUD_ID = #{studId}
					) FA ON ST.STUD_ID = FA.STUD_ID AND ST.SUBJ_CD = FA.SUBJ_CD AND ST.EXAM_FIELD_NM = FA.FIELD_NM
				) CF
				GROUP BY STUD_ID, SUBJ_CD 
			) CFRST ON AFRST.STUD_ID = CFRST.STUD_ID AND AFRST.SUBJ_CD = CFRST.SUBJ_CD
		</when>
		<otherwise>
			SELECT
			    AFRST.SUBJ_CD,
			    AFRST.ACT_FILED_NM_SP AS ACT_FIELD_NM_SP,
				IF(ACT_CHECK IS NULL, NULL ,AFRST.ACT_FILED_CRT_RT_SP) AS ACT_FIELD_CRT_RT_SP,
				IF(ACT_CHECK IS NULL, NULL ,AFRST.ACT_FILED_STD_CRT_RT_SP) AS ACT_FIELD_STD_CRT_RT_SP,
			    CFRST.CONT_FILED_NM_SP AS CONT_FIELD_NM_SP,
                IF(CONT_CHECK IS NULL, NULL ,CFRST.CONT_FILED_CRT_RT_SP) AS CONT_FIELD_CRT_RT_SP,
				IF(CONT_CHECK IS NULL, NULL ,CFRST.CONT_FILED_STD_CRT_RT_SP) AS CONT_FIELD_STD_CRT_RT_SP
			FROM (
				SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(CRT_RT) AS ACT_CHECK,
					GROUP_CONCAT(ACT_FIELD ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_NM_SP,
					GROUP_CONCAT(IFNULL(CRT_RT,0) ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_CRT_RT_SP,
					GROUP_CONCAT(IFNULL(STD_CRT_RT,0) ORDER BY SUBJ_CD, ACT_FIELD SEPARATOR ',') AS ACT_FILED_STD_CRT_RT_SP
				FROM (
					SELECT
						ST.STUD_ID,
						ST.SUBJ_CD,
						ST.EXAM_FIELD_NM AS ACT_FIELD,
						ROUND(CRT_CNT / QUES_CNT * ROUND(QUES_CNT / MAX_QUES_CNT * 100)) AS CRT_RT,
						ROUND(QUES_CNT / MAX_QUES_CNT * 100) AS STD_CRT_RT
					FROM (
						SELECT
							FS.STUD_ID,
							CF.SUBJ_CD,
							CF.EXAM_FIELD_NM
						FROM VS_REPORT_STUD FS
						LEFT OUTER JOIN COMM_EXAM_FIELD CF ON CF.FIELD_TYPE = 'A'
						WHERE FS.YYMM = #{yymm}
							AND FS.TERM = #{term}
							AND FS.STUD_ID = #{studId}
					) ST
					LEFT OUTER JOIN (
						SELECT
							STUD_ID,
							SUBJ_CD,
							FIELD_NM,
							QUES_CNT,
							CRT_CNT,
							(SELECT SUM(QUES_CNT) FROM VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS TOTAL_QUES_CNT,
							(SELECT MAX(QUES_CNT) FROM VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS MAX_QUES_CNT
						FROM VS_REPORT_EXAM_SUBJ_ACT_FIELD_RST FS
						WHERE YYMM = #{yymm}
							AND TERM = #{term}
							AND STUD_ID = #{studId}
					) FA ON ST.STUD_ID = FA.STUD_ID AND ST.SUBJ_CD = FA.SUBJ_CD AND ST.EXAM_FIELD_NM = FA.FIELD_NM
				) AF
				GROUP BY STUD_ID, SUBJ_CD 
			) AFRST
			LEFT OUTER JOIN (
			    SELECT
					STUD_ID,
					SUBJ_CD,
					SUM(CRT_RT) AS CONT_CHECK,
					GROUP_CONCAT(CONT_FIELD ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_NM_SP,
					GROUP_CONCAT(IFNULL(CRT_RT,0) ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_CRT_RT_SP,
					GROUP_CONCAT(IFNULL(STD_CRT_RT,0) ORDER BY SUBJ_CD, CONT_FIELD SEPARATOR ',') AS CONT_FILED_STD_CRT_RT_SP
				FROM (
					SELECT
						ST.STUD_ID,
						ST.SUBJ_CD,
						ST.EXAM_FIELD_NM AS CONT_FIELD,
						ROUND(CRT_CNT / QUES_CNT * ROUND(QUES_CNT / MAX_QUES_CNT * 100)) AS CRT_RT,
						ROUND(QUES_CNT / MAX_QUES_CNT * 100) AS STD_CRT_RT
					FROM (
						SELECT
							FS.STUD_ID,
							CF.SUBJ_CD,
							CF.EXAM_FIELD_NM
						FROM VS_REPORT_STUD FS
						LEFT OUTER JOIN COMM_EXAM_FIELD CF ON CF.FIELD_TYPE = 'C'
						WHERE FS.YYMM = #{yymm}
							AND FS.TERM = #{term}
							AND FS.STUD_ID = #{studId}
					) ST
					LEFT OUTER JOIN (
						SELECT
							STUD_ID,
							SUBJ_CD,
							FIELD_NM,
							QUES_CNT,
							CRT_CNT,
							(SELECT SUM(QUES_CNT) FROM VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS TOTAL_QUES_CNT,
							(SELECT MAX(QUES_CNT) FROM VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} AND SUBJ_CD = FS.SUBJ_CD GROUP BY SUBJ_CD) AS MAX_QUES_CNT
						FROM VS_REPORT_EXAM_SUBJ_CONT_FIELD_RST FS
						WHERE YYMM = #{yymm}
							AND TERM = #{term}
							AND STUD_ID = #{studId}
					) FA ON ST.STUD_ID = FA.STUD_ID AND ST.SUBJ_CD = FA.SUBJ_CD AND ST.EXAM_FIELD_NM = FA.FIELD_NM
				) CF
				GROUP BY STUD_ID, SUBJ_CD 
			) CFRST ON AFRST.STUD_ID = CFRST.STUD_ID AND AFRST.SUBJ_CD = CFRST.SUBJ_CD;
		</otherwise>
	</choose>
    </select>
    
    <select id="selectYymmwk" parameterType="hashMap" resultType="resultMap">
		SELECT
			FS.STUD_ID,
		    CW.YYMM,
		    CW.WK
		FROM FIRST_VS_REPORT_STUD FS
		JOIN COMM_WK_DT CW ON CW.YYMM BETWEEN CAST(SUBSTRING(FS.START_YYMMWK,1,6) AS SIGNED) AND CAST(SUBSTRING(FS.END_YYMMWK,1,6) AS SIGNED) AND CONCAT(YYMM,WK) BETWEEN FS.START_YYMMWK AND FS.END_YYMMWK
		WHERE FS.STUD_ID  = #{studId}
    </select>
    
    <select id="selectVisionExamList" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
		SELECT 
			EXAM_CD,
			SMT_ID,
			STU_ID,
			SUBJ_CD,
			SMT_DTTM,
			TYPE,
			EXAM_NM,
			CRT_RT,
			CRT_QUES_CNT,
			QUES_CNT,
			CRT_QUES,
			GUESS_QUES,
			SKIP_QUES,
			GUESS_INC_QUES,
			CURSORY_QUES,
			INCRT_QUES,
			MISTAKE_QUES
		FROM (
		<foreach collection="yymms" item="item"  open="" close="" separator="UNION ALL">
			SELECT
				CAST(EXAM_CD AS SIGNED) AS EXAM_CD,
				SMT_ID,
				STU_ID,
				SUBJ_CD,
				DATE_FORMAT(SMT_DTTM, '%Y-%m-%d %H:%i:%s') AS SMT_DTTM,
				EXAM_TYPE AS TYPE,
				EXAM_NM,
				CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
					ELSE ROUND(CRT_CNT / QUES_CNT * 100)
				END AS CRT_RT,
				CRT_CNT AS CRT_QUES_CNT,
				QUES_CNT,
				CRT_QUES_SP AS CRT_QUES,
				GUESS_CRT_QUES_SP AS GUESS_QUES,
				SKIP_QUES_SP AS SKIP_QUES,
				GUESS_INCRT_QUES_SP AS GUESS_INC_QUES,
				CURSORY_QUES_SP AS CURSORY_QUES,
				INCRT_QUES_SP AS INCRT_QUES,
				MISTAKE_QUES_SP AS MISTAKE_QUES
			FROM EXAM_WEEK_RST
			WHERE YYMM = #{item.yymm}
				AND WK = #{item.wk}
			    AND STUD_ID = #{item.studId}
			    AND SUBJ_CD = #{item.subjCd}
        </foreach>
        ) FVSEXAM
        ORDER BY SMT_DTTM DESC
		</when>
		<otherwise>
			SELECT
				CAST(EXAM_CD AS SIGNED) AS EXAM_CD,
			    SMT_ID,
			    STU_ID,
			    SUBJ_CD,
			    DATE_FORMAT(SMT_DTTM, '%Y-%m-%d %H:%i:%s') AS SMT_DTTM,
			    EXAM_TYPE AS TYPE,
			    EXAM_NM,
			    CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
			        ELSE ROUND(CRT_CNT / QUES_CNT * 100)
			    END AS CRT_RT,
			    CRT_CNT AS CRT_QUES_CNT,
			    QUES_CNT,
			    CRT_QUES_SP AS CRT_QUES,
				GUESS_CRT_QUES_SP AS GUESS_QUES,
				SKIP_QUES_SP AS SKIP_QUES,
				GUESS_INCRT_QUES_SP AS GUESS_INC_QUES,
				CURSORY_QUES_SP AS CURSORY_QUES,
				INCRT_QUES_SP AS INCRT_QUES,
				MISTAKE_QUES_SP AS MISTAKE_QUES
			FROM EXAM_MONTH_RST
			WHERE YYMM IN 
				<foreach collection="yymms" item="item"  open="(" close=")" separator=",">
	                    #{item}
                </foreach>
				AND STUD_ID = #{studId}
			    AND SUBJ_CD = #{subjCd}
		    ORDER BY SMT_DTTM DESC
		</otherwise>
	</choose>
	<choose>
		<when test="( startIdx == null or startIdx == '') and (pageSize == null or pageSize == '')">
			LIMIT 0, 10
		</when>
		<when test="startIdx == null or startIdx == ''">
			LIMIT 0, ${pageSize}
		</when>
		<when test="pageSize == null or pageSize == ''">
			LIMIT ${idx}, 10
		</when>
		<otherwise>
			LIMIT ${idx},  ${pageSize}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionExamCount" parameterType="hashMap" resultType="resultMap">
		SELECT
			COUNT(EXAM_CD) AS TOTAL_COUNT
		FROM (
	<choose>
		<when test="term == 0">
		<foreach collection="yymms" item="item"  open="" close="" separator="UNION ALL">
			SELECT
				EXAM_CD,
				SMT_ID,
				STU_ID,
				SUBJ_CD,
				SMT_DTTM,
				EXAM_TYPE AS TYPE,
				EXAM_NM,
				CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
					ELSE ROUND(CRT_CNT / QUES_CNT * 100)
				END AS CRT_RT,
				CRT_CNT AS CRT_QUES_CNT,
				QUES_CNT,
				CRT_QUES_SP AS CRT_QUES,
				GUESS_CRT_QUES_SP AS GUESS_QUES,
				SKIP_QUES_SP AS SKIP_QUES,
				GUESS_INCRT_QUES_SP AS GUESS_INC_QUES,
				CURSORY_QUES_SP AS CURSORY_QUES,
				INCRT_QUES_SP AS INCRT_QUES,
				MISTAKE_QUES_SP AS MISTAKE_QUES
			FROM EXAM_WEEK_RST
			WHERE YYMM = #{item.yymm}
				AND WK = #{item.wk}
			    AND STUD_ID = #{item.studId}
			    AND SUBJ_CD = #{item.subjCd}
        </foreach>
		</when>
		<otherwise>
			SELECT
				EXAM_CD,
			    SMT_ID,
			    STU_ID,
			    SUBJ_CD,
			    SMT_DTTM,
			    EXAM_TYPE AS TYPE,
			    EXAM_NM,
			    CASE
					WHEN QUES_CNT <![CDATA[<]]> CRT_CNT THEN 100
			        ELSE ROUND(CRT_CNT / QUES_CNT * 100)
			    END AS CRT_RT,
			    CRT_CNT AS CRT_QUES_CNT,
			    QUES_CNT,
			    CRT_QUES_SP AS CRT_QUES,
				GUESS_CRT_QUES_SP AS GUESS_QUES,
				SKIP_QUES_SP AS SKIP_QUES,
				GUESS_INCRT_QUES_SP AS GUESS_INC_QUES,
				CURSORY_QUES_SP AS CURSORY_QUES,
				INCRT_QUES_SP AS INCRT_QUES,
				MISTAKE_QUES_SP AS MISTAKE_QUES
			FROM EXAM_MONTH_RST
			WHERE YYMM IN 
				<foreach collection="yymms" item="item"  open="(" close=")" separator=",">
	                    #{item}
                </foreach>
				AND STUD_ID = #{studId}
			    AND SUBJ_CD = #{subjCd}
		</otherwise>
	</choose>
		) EXAM
    </select>
    
	<select id="selectVisionAttStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				(SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = ATT.ATT_MSG) AS ATT_RT_MSG,
				ATT_RT,
			    PLAN_DAY_CNT AS LRN_PLAN_DT_CNT,
			    ATT_CNT AS ATT_DT_CNT,
			    IF(LOGIN_PTN >= 50, '규칙적', '불규칙적') AS LOGIN_PTN 
			FROM FIRST_VS_REPORT_ATT_STT ATT
			WHERE STUD_ID = #{studId};
		</when>
		<otherwise>
			SELECT
				(SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = ATT.ATT_MSG) AS ATT_RT_MSG,
				ATT_RT,
			    PLAN_DAY_CNT AS LRN_PLAN_DT_CNT,
			    ATT_CNT AS ATT_DT_CNT,
			    IF(LOGIN_PTN >= 50, '규칙적', '불규칙적') AS LOGIN_PTN
			FROM VS_REPORT_ATT_STT ATT
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
				AND STUD_ID = #{studId};
		</otherwise>
	</choose>
    </select>
	
	<select id="selectVisionAttLog" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
		<foreach collection="yymmwk" item="item"  open="" close=";" separator="UNION ALL">
			SELECT
				DATE_FORMAT(CW.ATT_DT, '%Y-%m-%d') AS DT,
				DATE_FORMAT(WA.FIRST_LOGIN_DTTM, '%Y-%m-%d %H:%i:%s') AS LOGIN_TM
			FROM FIRST_VS_REPORT_STUD FS 
			LEFT OUTER JOIN (
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					MO AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					TU AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					WE AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					TH AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					FR AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					SA AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
				UNION ALL
				SELECT
					#{studId} AS STUD_ID,
					YYMMWK,
					SU AS ATT_DT
				FROM COMM_WK_DT
				WHERE YYMMWK = #{item.yymmwk}
			) CW ON FS.STUD_ID = CW.STUD_ID
			LEFT OUTER JOIN WEEK_ATT_LOG WA ON CW.YYMMWK = WA.YYMMWK AND CW.STUD_ID = WA.STUD_ID AND CW.ATT_DT = WA.ATT_DT
			WHERE FS.STUD_ID = #{studId}
        </foreach>
		</when>
		<otherwise>
			SELECT
				DATE_FORMAT(CM.ATT_DT, '%Y-%m-%d') AS DT,
				DATE_FORMAT(FIRST_LOGIN_DTTM, '%Y-%m-%d %H:%i:%s') AS LOGIN_TM
			FROM VS_REPORT_STUD VS 
			LEFT OUTER JOIN (
				SELECT
					#{studId} AS STUD_ID,
					DT AS ATT_DT
				FROM(
					SELECT
						DISTINCT 
							DT
					FROM DAY_PLAN_STT
					WHERE DT BETWEEN #{startDt} AND #{endDt}
				) ATT
			) CM ON VS.STUD_ID = CM.STUD_ID
			LEFT OUTER JOIN MONTH_ATT_LOG MA ON MA.YYMM BETWEEN VS.START_YYMM AND VS.END_YYMM AND VS.STUD_ID = MA.STUD_ID AND CM.ATT_DT = MA.ATT_DT
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId};
		</otherwise>
	</choose>
    </select>
    
    <select id="selectAttYymmwk" parameterType="hashMap" resultType="resultMap">
		SELECT
			DISTINCT 
				CW.YYMMWK
		FROM FIRST_VS_REPORT_STUD FS 
		LEFT OUTER JOIN COMM_WK_DT CW ON CW.YYMMWK BETWEEN FS.START_YYMMWK AND FS.END_YYMMWK
		WHERE FS.STUD_ID = #{studId};
    </select>
    
    <select id="selectAttDt" parameterType="hashMap" resultType="resultMap">
		SELECT
			DATE_FORMAT(CONCAT(START_YYMM,'01'), '%Y-%m-%d') AS START_DT,
		    DATE_FORMAT(LAST_DAY(CONCAT(END_YYMM,'01')), '%Y-%m-%d') AS END_DT
		FROM VS_REPORT_STUD
		WHERE YYMM = #{yymm}
			AND TERM = #{term}
			AND STUD_ID = #{studId};
    </select>
	
	<select id="selectVisionLrnTm" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				(SELECT SUM(LRN_SEC) FROM FIRST_VS_REPORT_SUBJ_LRN_TM WHERE STUD_ID = #{studId} GROUP BY STUD_ID) AS LRN_TM,
				SUBJ_CD AS MAX_SUBJ_CD
			FROM (
				SELECT
					SUBJ_CD,
					SUM(LRN_SEC) AS LRN_SEC
				FROM FIRST_VS_REPORT_SUBJ_LRN_TM
				WHERE STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
				ORDER BY LRN_SEC DESC
				LIMIT 1
			) STM;
		</when>
		<otherwise>
			SELECT
				(SELECT SUM(LRN_SEC) FROM VS_REPORT_SUBJ_LRN_TM WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} GROUP BY STUD_ID) AS LRN_TM,
				SUBJ_CD AS MAX_SUBJ_CD
			FROM (
				SELECT
					SUBJ_CD,
					SUM(LRN_SEC) AS LRN_SEC
				FROM VS_REPORT_SUBJ_LRN_TM
				WHERE YYMM = #{yymm}
					AND TERM = #{term}
					AND STUD_ID = #{studId}
				GROUP BY STUD_ID, SUBJ_CD
				ORDER BY LRN_SEC DESC
				LIMIT 1
			) STM;
		</otherwise>
	</choose>
    </select>
	
	<select id="selectVisionSubjLrnTm" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				SUBJ_CD,
			    SUB_SUBJ_CD,
				SUM(LRN_SEC) AS LRN_SEC
			FROM FIRST_VS_REPORT_SUBJ_LRN_TM
			WHERE STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD, SUB_SUBJ_CD
			ORDER BY SUBJ_CD, SUB_SUBJ_CD;
		</when>
		<otherwise>
			SELECT
				SUBJ_CD,
			    SUB_SUBJ_CD,
				SUM(LRN_SEC) AS LRN_SEC
			FROM VS_REPORT_SUBJ_LRN_TM
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
				AND STUD_ID = #{studId}
			GROUP BY STUD_ID, SUBJ_CD, SUB_SUBJ_CD
			ORDER BY SUBJ_CD, SUB_SUBJ_CD;
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionPrintBasicInfo" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				STUD_NM,
			    CONCAT(
					(SELECT IFNULL(MO,IFNULL(TU,IFNULL(WE,IFNULL(TH,IFNULL(FR,IFNULL(SA,SU)))))) FROM COMM_WK_DT WHERE YYMM = ST.START_YYMM AND WK = ST.START_WK), 
			        ' ~ ',
			        (SELECT IFNULL(SU,IFNULL(SA,IFNULL(FR,IFNULL(TH,IFNULL(WE,IFNULL(TU,MO)))))) FROM COMM_WK_DT WHERE YYMM = ST.END_YYMM AND WK = ST.END_WK)
			    ) AS DT
			FROM (
				SELECT
					STUD_NM,
					SUBSTRING(START_YYMMWK,1,6) AS START_YYMM,
					SUBSTRING(START_YYMMWK,7,7) AS START_WK,
					SUBSTRING(END_YYMMWK,1,6) AS END_YYMM,
					SUBSTRING(END_YYMMWK,7,7) AS END_WK
				FROM FIRST_VS_REPORT_STUD
				WHERE STUD_ID = #{studId}
			) ST 
		</when>
		<otherwise>
			SELECT
				STUD_NM,
			    CONCAT(
					(SELECT IFNULL(MO,IFNULL(TU,IFNULL(WE,IFNULL(TH,IFNULL(FR,IFNULL(SA,SU)))))) FROM COMM_WK_DT WHERE YYMM = ST.START_YYMM AND WK = 1), 
			        ' ~ ',
			        END_DT
			    ) AS DT
			FROM (
				SELECT
					STUD_NM,
					START_YYMM,
					LAST_DAY(DATE_FORMAT(CONCAT(END_YYMM,'01'), '%Y-%m-%d')) AS END_DT
				FROM VS_REPORT_STUD VS
				WHERE YYMM = #{yymm}
					AND TERM = #{term}
					AND STUD_ID = #{studId}
			) ST
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionPrintBasicConsultingMsg" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				MSG_CD,
				CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = CM.MSG_CD) AS CHAR(2000)) AS MSG,
			  	MSG_USE_YN AS ACTIVE,
				MSG_TYPE
			FROM FIRST_VS_REPORT_CONSULTING_POINT_MSG CM
			WHERE STUD_ID = #{studId};
		</when>
		<otherwise>
			SELECT
				MSG_CD,
				CAST((SELECT MSG FROM COMM_MSG_CD WHERE MSG_CD = CM.MSG_CD) AS CHAR(2000)) AS MSG,
				MSG_USE_YN AS ACTIVE,
				MSG_TYPE
			FROM VS_REPORT_CONSULTING_POINT_MSG CM
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
	
	<select id="selectVisionPrintLrnStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				FA.PLAN_DAY_CNT AS PLAN_DT_CNT,
				FA.ATT_CNT AS ATT_DT_CNT,
				(SELECT SUM(LRN_SEC) FROM FIRST_VS_REPORT_SUBJ_LRN_TM WHERE STUD_ID = #{studId} GROUP BY STUD_ID) AS LRN_SEC,
				FL.PLAN_CNT,
				FL.PLAN_LRN_EX_CNT AS EX_CNT,
				FE.INCRT_NT_REG_CNT AS INCRT_NT_CNT,
				FE.INCRT_NT_FNSH_CNT
			FROM FIRST_VS_REPORT_STUD FS
			LEFT OUTER JOIN FIRST_VS_REPORT_LRN_EX_STT FL ON FS.STUD_ID = FL.STUD_ID
			LEFT OUTER JOIN FIRST_VS_REPORT_ATT_STT FA ON FS.STUD_ID = FA.STUD_ID
			LEFT OUTER JOIN FIRST_VS_REPORT_EXAM_STT FE ON FS.STUD_ID = FE.STUD_ID
			WHERE FS.STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
			    VA.PLAN_DAY_CNT AS PLAN_DT_CNT,
			    VA.ATT_CNT AS ATT_DT_CNT,
			    (SELECT SUM(LRN_SEC) FROM VS_REPORT_SUBJ_LRN_TM WHERE YYMM = #{yymm} AND TERM = #{term} AND STUD_ID = #{studId} GROUP BY STUD_ID) AS LRN_SEC,
			    VL.PLAN_CNT,
			    VL.PLAN_LRN_EX_CNT AS EX_CNT,
			    VE.INCRT_NT_REG_CNT AS INCRT_NT_CNT,
			    VE.INCRT_NT_FNSH_CNT
			FROM VS_REPORT_STUD VS
			LEFT OUTER JOIN VS_REPORT_LRN_EX_STT VL ON VS.YYMM = VL.YYMM AND VS.TERM = VL.TERM AND VS.STUD_ID = VL.STUD_ID
			LEFT OUTER JOIN VS_REPORT_ATT_STT VA ON VS.YYMM = VA.YYMM AND VS.TERM = VA.TERM AND VS.STUD_ID = VA.STUD_ID
			LEFT OUTER JOIN VS_REPORT_EXAM_STT VE ON VS.YYMM = VE.YYMM AND VS.TERM = VE.TERM AND VS.STUD_ID = VE.STUD_ID
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <select id="selectVisionPrintExamStt" parameterType="hashMap" resultType="resultMap">
	<choose>
		<when test="term == 0">
			SELECT
				FE.QUES_CNT AS ANS_QUES_CNT,
				FE.CRT_CNT AS CRT_QUES_CNT,
				(IFNULL(FE.CURSORY_QUES_CNT,0) + IFNULL(FE.SKIP_QUES_CNT,0) + IFNULL(FE.GUESS_CRT_QUES_CNT,0) + IFNULL(FE.GUESS_INCRT_QUES_CNT,0) + IFNULL(FE.MISTAKE_QUES_CNT,0)) AS IMPRV_SLV_HABIT_CNT,
				(FE.INCRT_NT_REG_CNT - FE.INCRT_NT_FNSH_CNT) AS INCRT_NT_NT_CNT,
				FE.SKIP_QUES_CNT,
				FE.CURSORY_QUES_CNT,
				(IFNULL(FE.GUESS_CRT_QUES_CNT,0) + IFNULL(FE.GUESS_INCRT_QUES_CNT,0)) AS GUESS_QUES_CNT,
				FE.MISTAKE_QUES_CNT AS MISTAKEN_QUES_CNT
			FROM FIRST_VS_REPORT_STUD FS
			LEFT OUTER JOIN FIRST_VS_REPORT_EXAM_STT FE ON FS.STUD_ID = FE.STUD_ID
			WHERE FS.STUD_ID = #{studId}
		</when>
		<otherwise>
			SELECT
				VE.QUES_CNT AS ANS_QUES_CNT,
			    VE.CRT_CNT AS CRT_QUES_CNT,
			    (IFNULL(VE.CURSORY_QUES_CNT,0) + IFNULL(VE.SKIP_QUES_CNT,0) + IFNULL(VE.GUESS_CRT_QUES_CNT,0) + IFNULL(VE.GUESS_INCRT_QUES_CNT,0) + IFNULL(VE.MISTAKE_QUES_CNT,0)) AS IMPRV_SLV_HABIT_CNT,
			    (VE.INCRT_NT_REG_CNT - VE.INCRT_NT_FNSH_CNT) AS INCRT_NT_NT_CNT,
			    VE.SKIP_QUES_CNT,
			    VE.CURSORY_QUES_CNT,
			    (IFNULL(VE.GUESS_CRT_QUES_CNT,0) + IFNULL(VE.GUESS_INCRT_QUES_CNT,0)) AS GUESS_QUES_CNT,
			    VE.MISTAKE_QUES_CNT AS MISTAKEN_QUES_CNT
			FROM VS_REPORT_STUD VS
			LEFT OUTER JOIN VS_REPORT_EXAM_STT VE ON VS.YYMM = VE.YYMM AND VS.TERM = VE.TERM AND VS.STUD_ID = VE.STUD_ID
			WHERE VS.YYMM = #{yymm}
				AND VS.TERM = #{term}
			    AND VS.STUD_ID = #{studId}
		</otherwise>
	</choose>
    </select>
    
    <update id="updateVisionPrintFeedback" parameterType="hashMap">
    <choose>
		<when test="term == 0">
			UPDATE FIRST_VS_REPORT_MSG 
			SET 
				COMM_MSG_1 = #{firstCommonMsg},
				LRN_EX_MSG = #{positiveLrnMsg},
				EXAM_MSG_1 = #{positiveExamMaxSubjMsg},
				EXAM_MSG_2 = #{positiveExamMinSubjMsg},
				EXAM_MSG_3 = #{positiveExamReviewSubjMsg},
				EXAM_MSG_4 = #{positiveExamIncrtNtMsg},
				LRN_EX_CONTROL_MSG = #{negativeLrnMsg},
			    N_LRN_RECOMMAND_MSG = #{negativeSubjRecommendMsg},
			    SUBJ_REVIEW_MSG = #{negativeReviewSubjMsg},
			    SUBJ_PREVIEW_MSG = #{negativePreviewSubjMsg},
			    COMM_MSG_2 = #{lastCommonMsg},
			    UPD_DTTM = NOW()
			WHERE STUD_ID = #{studId}
		</when>
		<otherwise>
			UPDATE VS_REPORT_MSG 
			SET 
				COMM_MSG_1 = #{firstCommonMsg},
				LRN_EX_MSG = #{positiveLrnMsg},
				EXAM_MSG_1 = #{positiveExamMaxSubjMsg},
				EXAM_MSG_2 = #{positiveExamMinSubjMsg},
				EXAM_MSG_3 = #{positiveExamReviewSubjMsg},
				EXAM_MSG_4 = #{positiveExamIncrtNtMsg},
				LRN_EX_CONTROL_MSG = #{negativeLrnMsg},
			    N_LRN_RECOMMAND_MSG = #{negativeSubjRecommendMsg},
			    SUBJ_REVIEW_MSG = #{negativeReviewSubjMsg},
			    SUBJ_PREVIEW_MSG = #{negativePreviewSubjMsg},
			    COMM_MSG_2 = #{lastCommonMsg},
			    UPD_DTTM = NOW()
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
		</otherwise>
	</choose>
	</update>
	
	<update id="updateVisionPrintFeedbackConsultingMsg" parameterType="hashMap">
    <choose>
		<when test="term == 0">
			UPDATE FIRST_VS_REPORT_CONSULTING_POINT_MSG 
			SET 
				MSG_USE_YN = #{active},
				UPD_DTTM = NOW()
			WHERE STUD_ID = #{studId}
				AND MSG_CD = #{msgCd}
				AND MSG_TYPE = #{msgType}
		</when>
		<otherwise>
			UPDATE VS_REPORT_CONSULTING_POINT_MSG 
			SET 
				MSG_USE_YN = #{active},
				UPD_DTTM = NOW()
			WHERE YYMM = #{yymm}
				AND TERM = #{term}
			    AND STUD_ID = #{studId}
			    AND MSG_CD = #{msgCd}
				AND MSG_TYPE = #{msgType}
		</otherwise>
	</choose>
	</update>
	
	<select id="selectSubjCd" parameterType="hashMap" resultType="resultMap">
		SELECT
			SUBJ_CD,
		    UPPER_SUBJ_CD,
		    SUBJ_NM,
		    DEPTH
		FROM COMM_SUBJ_CD
		WHERE SUBJ_CD NOT LIKE 'Z%';
    </select>
	
</mapper>
